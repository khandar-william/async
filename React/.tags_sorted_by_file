!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
broadcast_count	src/count.php	/^function broadcast_count($conns) {$/;"	f
conns	src/count.php	/^$conns = new \\SplObjectStorage();$/;"	v
count	src/count.php	/^    $count = count($conns);$/;"	v
loop	src/count.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
socket	src/count.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
ClassLoader	vendor/composer/ClassLoader.php	/^class ClassLoader$/;"	c
add	vendor/composer/ClassLoader.php	/^    public function add($prefix, $paths, $prepend = false)$/;"	f
addClassMap	vendor/composer/ClassLoader.php	/^    public function addClassMap(array $classMap)$/;"	f
class	vendor/composer/ClassLoader.php	/^            $class = substr($class, 1);$/;"	v
classMap	vendor/composer/ClassLoader.php	/^            $this->classMap = $classMap;$/;"	v
classMap	vendor/composer/ClassLoader.php	/^            $this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	vendor/composer/ClassLoader.php	/^    private $classMap = array();$/;"	v
className	vendor/composer/ClassLoader.php	/^            $className = $class;$/;"	v
className	vendor/composer/ClassLoader.php	/^            $className = substr($class, $pos + 1);$/;"	v
classPath	vendor/composer/ClassLoader.php	/^            $classPath = null;$/;"	v
classPath	vendor/composer/ClassLoader.php	/^            $classPath = strtr(substr($class, 0, $pos), '\\\\', DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;$/;"	v
fallbackDirs	vendor/composer/ClassLoader.php	/^                $this->fallbackDirs = array_merge($/;"	v
fallbackDirs	vendor/composer/ClassLoader.php	/^            $this->fallbackDirs = (array) $paths;$/;"	v
fallbackDirs	vendor/composer/ClassLoader.php	/^    private $fallbackDirs = array();$/;"	v
findFile	vendor/composer/ClassLoader.php	/^    public function findFile($class)$/;"	f
first	vendor/composer/ClassLoader.php	/^        $first = $class[0];$/;"	v
first	vendor/composer/ClassLoader.php	/^        $first = $prefix[0];$/;"	v
getClassMap	vendor/composer/ClassLoader.php	/^    public function getClassMap()$/;"	f
getFallbackDirs	vendor/composer/ClassLoader.php	/^    public function getFallbackDirs()$/;"	f
getPrefixes	vendor/composer/ClassLoader.php	/^    public function getPrefixes()$/;"	f
getUseIncludePath	vendor/composer/ClassLoader.php	/^    public function getUseIncludePath()$/;"	f
loadClass	vendor/composer/ClassLoader.php	/^    public function loadClass($class)$/;"	f
prefixes	vendor/composer/ClassLoader.php	/^    private $prefixes = array();$/;"	v
register	vendor/composer/ClassLoader.php	/^    public function register($prepend = false)$/;"	f
set	vendor/composer/ClassLoader.php	/^    public function set($prefix, $paths)$/;"	f
setUseIncludePath	vendor/composer/ClassLoader.php	/^    public function setUseIncludePath($useIncludePath)$/;"	f
unregister	vendor/composer/ClassLoader.php	/^    public function unregister()$/;"	f
useIncludePath	vendor/composer/ClassLoader.php	/^        $this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	vendor/composer/ClassLoader.php	/^    private $useIncludePath = false;$/;"	v
baseDir	vendor/composer/autoload_classmap.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor/composer/autoload_classmap.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
baseDir	vendor/composer/autoload_namespaces.php	/^$baseDir = dirname($vendorDir);$/;"	v
vendorDir	vendor/composer/autoload_namespaces.php	/^$vendorDir = dirname(dirname(__FILE__));$/;"	v
ComposerAutoloaderInited5781e02500d5a9ca61aa8845910f12	vendor/composer/autoload_real.php	/^class ComposerAutoloaderInited5781e02500d5a9ca61aa8845910f12$/;"	c
baseDir	vendor/composer/autoload_real.php	/^        $baseDir = dirname($vendorDir);$/;"	v
classMap	vendor/composer/autoload_real.php	/^        $classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
getLoader	vendor/composer/autoload_real.php	/^    public static function getLoader()$/;"	f
loadClassLoader	vendor/composer/autoload_real.php	/^    public static function loadClassLoader($class)$/;"	f
loader	vendor/composer/autoload_real.php	/^    private static $loader;$/;"	v
map	vendor/composer/autoload_real.php	/^        $map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
vendorDir	vendor/composer/autoload_real.php	/^        $vendorDir = dirname(__DIR__);$/;"	v
EventEmitter	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^class EventEmitter implements EventEmitterInterface$/;"	c
emit	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function emit($event, array $arguments = array())$/;"	f
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^            $this->listeners = array();$/;"	v
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    protected $listeners = array();$/;"	v
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function listeners($event)$/;"	f
on	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function on($event, $listener)$/;"	f
once	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function once($event, $listener)$/;"	f
onceListener	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^        $onceListener = function () use ($that, &$onceListener, $event, $listener) {$/;"	v
removeAllListeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function removeAllListeners($event = null)$/;"	f
removeListener	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function removeListener($event, $listener)$/;"	f
that	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^        $that = $this;$/;"	v
EventEmitter2	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^class EventEmitter2 extends EventEmitter$/;"	c
__construct	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function __construct(array $options = array())$/;"	f
anyListeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected $anyListeners = array();$/;"	v
emit	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function emit($event, array $arguments = array())$/;"	f
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function listeners($event)$/;"	f
many	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function many($event, $timesToListen, $listener)$/;"	f
manyListener	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $manyListener = function () use ($that, &$timesListened, &$manyListener, $event, $timesToListen, $listener) {$/;"	v
matchEventName	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected function matchEventName($matchPattern, $eventName)$/;"	f
matchedListeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $matchedListeners = array();$/;"	v
namePart	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^            $namePart = $nameParts[$i];$/;"	v
nameParts	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $nameParts = explode($this->options['delimiter'], $eventName);$/;"	v
offAny	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function offAny($listener)$/;"	f
onAny	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function onAny($listener)$/;"	f
options	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $this->options = array_merge(array($/;"	v
options	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected $options;$/;"	v
patternPart	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^            $patternPart = $patternParts[$i];$/;"	v
patternParts	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $patternParts = explode($this->options['delimiter'], $matchPattern);$/;"	v
size	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $size = min(count($patternParts), count($nameParts));$/;"	v
that	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $that = $this;$/;"	v
timesListened	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $timesListened = 0;$/;"	v
EventEmitterInterface	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^interface EventEmitterInterface$/;"	i
emit	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function emit($event, array $arguments = array());$/;"	f
listeners	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function listeners($event);$/;"	f
on	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function on($event, $listener);$/;"	f
once	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function once($event, $listener);$/;"	f
removeAllListeners	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function removeAllListeners($event = null);$/;"	f
removeListener	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function removeListener($event, $listener);$/;"	f
EventEmitter2Test	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^class EventEmitter2Test extends \\PHPUnit_Framework_TestCase$/;"	c
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $this->emitter = new EventEmitter2();$/;"	v
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    private $emitter;$/;"	v
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $listener = function () use (&$listenerCalled) {$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $listenerCalled = 0;$/;"	v
provideMany	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function provideMany()$/;"	f
setUp	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function setUp()$/;"	f
testMany	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testMany($amount)$/;"	f
testManyWithLessThanZeroTtl	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testManyWithLessThanZeroTtl()$/;"	f
testOnAny	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testOnAny()$/;"	f
testOnAnyWithEmit	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testOnAnyWithEmit()$/;"	f
testWildcardMatching7	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testWildcardMatching7()$/;"	f
testWildcardMatching8	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testWildcardMatching8()$/;"	f
testoffAnyWithEmit	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testoffAnyWithEmit()$/;"	f
EventEmitterTest	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^class EventEmitterTest extends \\PHPUnit_Framework_TestCase$/;"	c
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $this->emitter = new EventEmitter();$/;"	v
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    private $emitter;$/;"	v
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listener = function () use (&$listenersCalled) {$/;"	v
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listener = new Listener();$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^            $listenerCalled = true;$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenerCalled = 0;$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenerCalled = false;$/;"	v
listenersCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenersCalled = 0;$/;"	v
setUp	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function setUp()$/;"	f
test	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $test = $this;$/;"	v
testAddListenerWithInvalidListener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithInvalidListener()$/;"	f
testAddListenerWithLambda	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithLambda()$/;"	f
testAddListenerWithMethod	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithMethod()$/;"	f
testAddListenerWithStaticMethod	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithStaticMethod()$/;"	f
testEmitWithNoListeners	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithNoListeners()$/;"	f
testEmitWithOneArgument	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithOneArgument()$/;"	f
testEmitWithTwoArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithTwoArguments()$/;"	f
testEmitWithTwoListeners	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithTwoListeners()$/;"	f
testEmitWithoutArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithoutArguments()$/;"	f
testOnce	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testOnce()$/;"	f
testRemoveAllListenersMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersMatching()$/;"	f
testRemoveAllListenersNotMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersNotMatching()$/;"	f
testRemoveAllListenersWithoutArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersWithoutArguments()$/;"	f
testRemoveListenerMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveListenerMatching()$/;"	f
testRemoveListenerNotMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveListenerNotMatching()$/;"	f
Listener	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^class Listener$/;"	c
onBar	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^    public static function onBar()$/;"	f
onFoo	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^    public function onFoo()$/;"	f
loader	vendor/evenement/evenement/tests/bootstrap.php	/^$loader = require __DIR__.'\/..\/vendor\/autoload.php';$/;"	v
CookieParser	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^class CookieParser implements CookieParserInterface$/;"	c
cookieParts	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^            $cookieParts = explode('=', $part, 2);$/;"	v
cookieParts	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^    protected static $cookieParts = array($/;"	v
data	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^        $data = array_merge(array_fill_keys(array_keys(self::$cookieParts), null), array($/;"	v
foundNonCookies	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^        $foundNonCookies = 0;$/;"	v
key	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^            $key = trim($cookieParts[0]);$/;"	v
parseCookie	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^    public function parseCookie($cookie, $host = null, $path = null, $decode = false)$/;"	f
pieces	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^        $pieces = array_filter(array_map('trim', explode(';', $cookie)));$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^                    $value = urldecode($value);$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^                $value = trim($cookieParts[1], " \\n\\r\\t\\0\\x0B\\"");$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParser.php	/^                $value = true;$/;"	v
CookieParserInterface	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParserInterface.php	/^interface CookieParserInterface$/;"	i
parseCookie	vendor/guzzle/parser/Guzzle/Parser/Cookie/CookieParserInterface.php	/^    public function parseCookie($cookie, $host = null, $path = null, $decode = false);$/;"	f
AbstractMessageParser	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^abstract class AbstractMessageParser implements MessageParserInterface$/;"	c
getUrlPartsFromMessage	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^    protected function getUrlPartsFromMessage($requestUrl, array $parts)$/;"	f
hostParts	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^            $hostParts = explode(':', $urlParts['host']);$/;"	v
path	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^        $path = $urlParts['path'];$/;"	v
qpos	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^        $qpos = strpos($path, '?');$/;"	v
urlParts	vendor/guzzle/parser/Guzzle/Parser/Message/AbstractMessageParser.php	/^        $urlParts = array($/;"	v
MessageParser	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^class MessageParser extends AbstractMessageParser$/;"	c
body	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^                    $body = implode('', array_slice($lines, $i + 2));$/;"	v
body	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $body = '';$/;"	v
headers	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $headers = array();$/;"	v
key	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^                $key = trim($parts[0]);$/;"	v
line	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $line = $lines[$i];$/;"	v
lines	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $lines = preg_split('\/(\\\\r?\\\\n)\/', $message, -1, PREG_SPLIT_DELIM_CAPTURE);$/;"	v
parseMessage	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^    protected function parseMessage($message)$/;"	f
parseRequest	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^    public function parseRequest($message)$/;"	f
parseResponse	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^    public function parseResponse($message)$/;"	f
parsed	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $parsed = array($/;"	v
parts	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^                $parts = explode(':', $line, 2);$/;"	v
parts	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $parts = $this->parseMessage($message);$/;"	v
protocol	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $protocol = 'HTTP';$/;"	v
protocol	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $protocol = strtoupper($startParts[0]);$/;"	v
startLine	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^                $startLine = explode(' ', $line, 3);$/;"	v
startLine	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^        $startLine = null;$/;"	v
startParts	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $startParts = explode('\/', $parts['start_line'][2]);$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^                $value = isset($parts[1]) ? trim($parts[1]) : '';$/;"	v
version	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $version = '1.1';$/;"	v
version	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParser.php	/^            $version = isset($startParts[1]) ? $startParts[1] : '1.1';$/;"	v
MessageParserInterface	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParserInterface.php	/^interface MessageParserInterface$/;"	i
parseRequest	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParserInterface.php	/^    public function parseRequest($message);$/;"	f
parseResponse	vendor/guzzle/parser/Guzzle/Parser/Message/MessageParserInterface.php	/^    public function parseResponse($message);$/;"	f
PeclHttpMessageParser	vendor/guzzle/parser/Guzzle/Parser/Message/PeclHttpMessageParser.php	/^class PeclHttpMessageParser extends AbstractMessageParser$/;"	c
parseRequest	vendor/guzzle/parser/Guzzle/Parser/Message/PeclHttpMessageParser.php	/^    public function parseRequest($message)$/;"	f
parseResponse	vendor/guzzle/parser/Guzzle/Parser/Message/PeclHttpMessageParser.php	/^    public function parseResponse($message)$/;"	f
parsed	vendor/guzzle/parser/Guzzle/Parser/Message/PeclHttpMessageParser.php	/^        $parsed = array($/;"	v
parts	vendor/guzzle/parser/Guzzle/Parser/Message/PeclHttpMessageParser.php	/^        $parts = http_parse_message($message);$/;"	v
ParserRegistry	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^class ParserRegistry$/;"	c
__construct	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    public function __construct()$/;"	f
class	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^            $class = $this->mapping[$name];$/;"	v
getInstance	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    public static function getInstance()$/;"	f
getParser	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    public function getParser($name)$/;"	f
instance	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    protected static $instance;$/;"	v
instances	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    protected $instances = array();$/;"	v
mapping	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    protected $mapping = array($/;"	v
registerParser	vendor/guzzle/parser/Guzzle/Parser/ParserRegistry.php	/^    public function registerParser($name, $parser)$/;"	f
PeclUriTemplate	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/PeclUriTemplate.php	/^class PeclUriTemplate implements UriTemplateInterface$/;"	c
__construct	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/PeclUriTemplate.php	/^    public function __construct()$/;"	f
expand	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/PeclUriTemplate.php	/^    public function expand($template, array $variables)$/;"	f
UriTemplate	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^class UriTemplate implements UriTemplateInterface$/;"	c
actuallyUseQueryString	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                        $actuallyUseQueryString = false;$/;"	v
actuallyUseQueryString	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $actuallyUseQueryString = false;$/;"	v
actuallyUseQueryString	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $actuallyUseQueryString = $useQueryString;$/;"	v
decodeReserved	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private function decodeReserved($string)$/;"	f
delims	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private static $delims = array($/;"	v
delimsPct	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private static $delimsPct = array($/;"	v
expand	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    public function expand($template, array $variables)$/;"	f
expandMatch	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private function expandMatch(array $matches)$/;"	f
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $expanded = $this->decodeReserved($expanded);$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $expanded = $value['value'] . '=' . $expanded;$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $expanded = $value['value'];$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $expanded = implode($joiner, $kvp);$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $expanded = implode(',', $kvp);$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                $expanded = rawurlencode($variable);$/;"	v
expanded	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $expanded = '';$/;"	v
expression	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $expression = substr($expression, 1);$/;"	v
isAssoc	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                $isAssoc = $this->isAssoc($variable);$/;"	v
isAssoc	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private function isAssoc(array $array)$/;"	f
isNestedArray	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                        $isNestedArray = false;$/;"	v
isNestedArray	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                        $isNestedArray = is_array($var);$/;"	v
joiner	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $joiner = '&';$/;"	v
joiner	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $joiner = ',';$/;"	v
joiner	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $joiner = $parsed['operator'];$/;"	v
key	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                        $key = rawurlencode($key);$/;"	v
kvp	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                $kvp = array();$/;"	v
operator	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $operator = $expression[0];$/;"	v
operator	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $operator = '';$/;"	v
operatorHash	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private static $operatorHash = array($/;"	v
parseExpression	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private function parseExpression($expression)$/;"	f
parsed	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $parsed = self::parseExpression($matches[1]);$/;"	v
prefix	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $prefix = '';$/;"	v
prefix	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $prefix = $parsed['operator'];$/;"	v
regex	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private static $regex = '\/\\{([^\\}]+)\\}\/';$/;"	v
replacements	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $replacements = array();$/;"	v
ret	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $ret = implode($joiner, $replacements);$/;"	v
rfc1738to3986	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        static $rfc1738to3986 = array($/;"	v
substrPos	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $substrPos = strpos($value, ':');$/;"	v
template	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $this->template = $template;$/;"	v
template	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private $template;$/;"	v
useQueryString	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $useQueryString = true;$/;"	v
useQueryString	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $useQueryString = false;$/;"	v
v	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                            $v = $k . ',' . $v;$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $value = $varspec;$/;"	v
value	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $value = trim($value);$/;"	v
values	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $values = explode(',', $expression);$/;"	v
var	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                                $var = $key . '=' . $var;$/;"	v
var	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                                $var = strtr(http_build_query(array($key => $var)), $rfc1738to3986);$/;"	v
var	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                            $var = $this->decodeReserved($var);$/;"	v
var	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                            $var = $value['value'] . '=' . $var;$/;"	v
var	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                        $var = rawurlencode($var);$/;"	v
variable	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^                    $variable = substr($variable, 0, $value['position']);$/;"	v
variable	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $variable = $this->variables[$value['value']];$/;"	v
variables	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^        $this->variables = $variables;$/;"	v
variables	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^    private $variables;$/;"	v
varspec	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplate.php	/^            $varspec = array();$/;"	v
UriTemplateInterface	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplateInterface.php	/^interface UriTemplateInterface$/;"	i
expand	vendor/guzzle/parser/Guzzle/Parser/UriTemplate/UriTemplateInterface.php	/^    public function expand($template, array $variables);$/;"	f
UrlParser	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^class UrlParser implements UrlParserInterface$/;"	c
defaults	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^        static $defaults = array('scheme' => null, 'host' => null, 'path' => null, 'port' => null, 'query' => null,$/;"	v
parseUrl	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^    public function parseUrl($url)$/;"	f
parts	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^        $parts = parse_url($url);$/;"	v
queryPos	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^            $queryPos = strpos($url, '?');$/;"	v
setUtf8Support	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^    public function setUtf8Support($utf8)$/;"	f
utf8	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^        $this->utf8 = $utf8;$/;"	v
utf8	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParser.php	/^    protected $utf8 = false;$/;"	v
UrlParserInterface	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParserInterface.php	/^interface UrlParserInterface$/;"	i
parseUrl	vendor/guzzle/parser/Guzzle/Parser/Url/UrlParserInterface.php	/^    public function parseUrl($url);$/;"	f
Deferred	vendor/react/promise/src/React/Promise/Deferred.php	/^class Deferred implements PromiseInterface, ResolverInterface, PromisorInterface$/;"	c
completed	vendor/react/promise/src/React/Promise/Deferred.php	/^        $this->completed = Util::promiseFor($result);$/;"	v
completed	vendor/react/promise/src/React/Promise/Deferred.php	/^    private $completed;$/;"	v
deferred	vendor/react/promise/src/React/Promise/Deferred.php	/^        $deferred = new static();$/;"	v
handlers	vendor/react/promise/src/React/Promise/Deferred.php	/^    private $handlers = array();$/;"	v
processQueue	vendor/react/promise/src/React/Promise/Deferred.php	/^    protected function processQueue($queue, $value)$/;"	f
progHandler	vendor/react/promise/src/React/Promise/Deferred.php	/^            $progHandler = array($deferred, 'progress');$/;"	v
progHandler	vendor/react/promise/src/React/Promise/Deferred.php	/^            $progHandler = function ($update) use ($deferred, $progressHandler) {$/;"	v
progress	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function progress($update = null)$/;"	f
progressHandlers	vendor/react/promise/src/React/Promise/Deferred.php	/^        $this->progressHandlers = $this->handlers = array();$/;"	v
progressHandlers	vendor/react/promise/src/React/Promise/Deferred.php	/^    private $progressHandlers = array();$/;"	v
promise	vendor/react/promise/src/React/Promise/Deferred.php	/^            $this->promise = new DeferredPromise($this);$/;"	v
promise	vendor/react/promise/src/React/Promise/Deferred.php	/^    private $promise;$/;"	v
promise	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function promise()$/;"	f
reject	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function reject($reason = null)$/;"	f
resolve	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function resolve($result = null)$/;"	f
resolver	vendor/react/promise/src/React/Promise/Deferred.php	/^            $this->resolver = new DeferredResolver($this);$/;"	v
resolver	vendor/react/promise/src/React/Promise/Deferred.php	/^    private $resolver;$/;"	v
resolver	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function resolver()$/;"	f
then	vendor/react/promise/src/React/Promise/Deferred.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
DeferredPromise	vendor/react/promise/src/React/Promise/DeferredPromise.php	/^class DeferredPromise implements PromiseInterface$/;"	c
__construct	vendor/react/promise/src/React/Promise/DeferredPromise.php	/^    public function __construct(Deferred $deferred)$/;"	f
deferred	vendor/react/promise/src/React/Promise/DeferredPromise.php	/^        $this->deferred = $deferred;$/;"	v
deferred	vendor/react/promise/src/React/Promise/DeferredPromise.php	/^    private $deferred;$/;"	v
then	vendor/react/promise/src/React/Promise/DeferredPromise.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
DeferredResolver	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^class DeferredResolver implements ResolverInterface$/;"	c
__construct	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^    public function __construct(Deferred $deferred)$/;"	f
deferred	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^        $this->deferred = $deferred;$/;"	v
deferred	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^    private $deferred;$/;"	v
progress	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^    public function progress($update = null)$/;"	f
reject	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^    public function reject($reason = null)$/;"	f
resolve	vendor/react/promise/src/React/Promise/DeferredResolver.php	/^    public function resolve($result = null)$/;"	f
FulfilledPromise	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^class FulfilledPromise implements PromiseInterface$/;"	c
__construct	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^    public function __construct($result = null)$/;"	f
result	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^                $result = call_user_func($fulfilledHandler, $result);$/;"	v
result	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^            $result = $this->result;$/;"	v
result	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^        $this->result = $result;$/;"	v
result	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^    private $result;$/;"	v
then	vendor/react/promise/src/React/Promise/FulfilledPromise.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
LazyPromise	vendor/react/promise/src/React/Promise/LazyPromise.php	/^class LazyPromise implements PromiseInterface$/;"	c
__construct	vendor/react/promise/src/React/Promise/LazyPromise.php	/^    public function __construct($factory)$/;"	f
factory	vendor/react/promise/src/React/Promise/LazyPromise.php	/^        $this->factory = $factory;$/;"	v
factory	vendor/react/promise/src/React/Promise/LazyPromise.php	/^    private $factory;$/;"	v
promise	vendor/react/promise/src/React/Promise/LazyPromise.php	/^                $this->promise = Util::promiseFor(call_user_func($this->factory));$/;"	v
promise	vendor/react/promise/src/React/Promise/LazyPromise.php	/^                $this->promise = new RejectedPromise($exception);$/;"	v
promise	vendor/react/promise/src/React/Promise/LazyPromise.php	/^    private $promise;$/;"	v
then	vendor/react/promise/src/React/Promise/LazyPromise.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
PromiseInterface	vendor/react/promise/src/React/Promise/PromiseInterface.php	/^interface PromiseInterface$/;"	i
then	vendor/react/promise/src/React/Promise/PromiseInterface.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null);$/;"	f
PromisorInterface	vendor/react/promise/src/React/Promise/PromisorInterface.php	/^interface PromisorInterface$/;"	i
promise	vendor/react/promise/src/React/Promise/PromisorInterface.php	/^    public function promise();$/;"	f
RejectedPromise	vendor/react/promise/src/React/Promise/RejectedPromise.php	/^class RejectedPromise implements PromiseInterface$/;"	c
__construct	vendor/react/promise/src/React/Promise/RejectedPromise.php	/^    public function __construct($reason = null)$/;"	f
reason	vendor/react/promise/src/React/Promise/RejectedPromise.php	/^        $this->reason = $reason;$/;"	v
reason	vendor/react/promise/src/React/Promise/RejectedPromise.php	/^    private $reason;$/;"	v
then	vendor/react/promise/src/React/Promise/RejectedPromise.php	/^    public function then($fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
ResolverInterface	vendor/react/promise/src/React/Promise/ResolverInterface.php	/^interface ResolverInterface$/;"	i
progress	vendor/react/promise/src/React/Promise/ResolverInterface.php	/^    public function progress($update = null);$/;"	f
reject	vendor/react/promise/src/React/Promise/ResolverInterface.php	/^    public function reject($reason = null);$/;"	f
resolve	vendor/react/promise/src/React/Promise/ResolverInterface.php	/^    public function resolve($result = null);$/;"	f
Util	vendor/react/promise/src/React/Promise/Util.php	/^class Util$/;"	c
promiseFor	vendor/react/promise/src/React/Promise/Util.php	/^    public static function promiseFor($promiseOrValue)$/;"	f
rejectedPromiseFor	vendor/react/promise/src/React/Promise/Util.php	/^    public static function rejectedPromiseFor($promiseOrValue)$/;"	f
When	vendor/react/promise/src/React/Promise/When.php	/^class When$/;"	c
all	vendor/react/promise/src/React/Promise/When.php	/^    public static function all($promisesOrValues, $fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
any	vendor/react/promise/src/React/Promise/When.php	/^    public static function any($promisesOrValues, $fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
array	vendor/react/promise/src/React/Promise/When.php	/^                $array = array();$/;"	v
deferred	vendor/react/promise/src/React/Promise/When.php	/^            $deferred  = new Deferred();$/;"	v
fulfillOne	vendor/react/promise/src/React/Promise/When.php	/^                            $fulfillOne = $rejectOne = function () {};$/;"	v
fulfillOne	vendor/react/promise/src/React/Promise/When.php	/^                $fulfillOne = function ($val, $i) use (&$values, &$toResolve, $deferred) {$/;"	v
fulfiller	vendor/react/promise/src/React/Promise/When.php	/^                    $fulfiller = function ($val) use ($i, &$fulfillOne, &$rejectOne) {$/;"	v
i	vendor/react/promise/src/React/Promise/When.php	/^            $i = 0;$/;"	v
lazy	vendor/react/promise/src/React/Promise/When.php	/^    public static function lazy($factory)$/;"	f
len	vendor/react/promise/src/React/Promise/When.php	/^            $len       = count($array);$/;"	v
map	vendor/react/promise/src/React/Promise/When.php	/^    public static function map($promisesOrValues, $mapFunc)$/;"	f
progress	vendor/react/promise/src/React/Promise/When.php	/^                $progress = array($deferred, 'progress');$/;"	v
promise	vendor/react/promise/src/React/Promise/When.php	/^        $promise = static::map($promisesOrValues, function ($val) {$/;"	v
reasons	vendor/react/promise/src/React/Promise/When.php	/^                $reasons  = array();$/;"	v
reduce	vendor/react/promise/src/React/Promise/When.php	/^    public static function reduce($promisesOrValues, $reduceFunc , $initialValue = null)$/;"	f
reject	vendor/react/promise/src/React/Promise/When.php	/^    public static function reject($promiseOrValue = null)$/;"	f
rejectOne	vendor/react/promise/src/React/Promise/When.php	/^                $rejectOne = function ($reason, $i) use (&$reasons, &$toReject, $deferred) {$/;"	v
rejecter	vendor/react/promise/src/React/Promise/When.php	/^                    $rejecter = function ($val) use ($i, &$fulfillOne, &$rejectOne) {$/;"	v
reset	vendor/react/promise/src/React/Promise/When.php	/^                        $reset = $fulfillOne($val, $i);$/;"	v
reset	vendor/react/promise/src/React/Promise/When.php	/^                        $reset = $rejectOne($val, $i);$/;"	v
resolve	vendor/react/promise/src/React/Promise/When.php	/^                $resolve = function ($item, $i) use ($mapFunc, &$results, &$toResolve, $deferred) {$/;"	v
resolve	vendor/react/promise/src/React/Promise/When.php	/^    public static function resolve($promiseOrValue = null)$/;"	f
results	vendor/react/promise/src/React/Promise/When.php	/^            $results   = array();$/;"	v
some	vendor/react/promise/src/React/Promise/When.php	/^    public static function some($promisesOrValues, $howMany, $fulfilledHandler = null, $errorHandler = null, $progressHandler = null)$/;"	f
toReject	vendor/react/promise/src/React/Promise/When.php	/^                $toReject = ($len - $toResolve) + 1;$/;"	v
toResolve	vendor/react/promise/src/React/Promise/When.php	/^            $toResolve = count($array);$/;"	v
toResolve	vendor/react/promise/src/React/Promise/When.php	/^            $toResolve = max(0, min($howMany, $len));$/;"	v
total	vendor/react/promise/src/React/Promise/When.php	/^            $total = count($array);$/;"	v
unwrapSingleResult	vendor/react/promise/src/React/Promise/When.php	/^        $unwrapSingleResult = function ($val) use ($fulfilledHandler) {$/;"	v
val	vendor/react/promise/src/React/Promise/When.php	/^            $val = array_shift($val);$/;"	v
values	vendor/react/promise/src/React/Promise/When.php	/^            $values    = array();$/;"	v
wrappedReduceFunc	vendor/react/promise/src/React/Promise/When.php	/^            $wrappedReduceFunc = function ($current, $val) use ($reduceFunc, $total, &$i) {$/;"	v
DeferredProgressTest	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^class DeferredProgressTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $d = new Deferred();$/;"	v
d2	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $d2 = new Deferred();$/;"	v
errorCollector	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $errorCollector = new ErrorCollector();$/;"	v
exception	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $exception = new \\Exception();$/;"	v
mock	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $mock = $this->createCallableMock();$/;"	v
mock2	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $mock2 = $this->createCallableMock();$/;"	v
sentinel	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^        $sentinel = new \\stdClass();$/;"	v
shouldAllowRejectAfterProgress	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldAllowRejectAfterProgress()$/;"	f
shouldAllowResolveAfterProgress	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldAllowResolveAfterProgress()$/;"	f
shouldForwardProgressEventsWhenIntermediaryCallbackTiedToAResolvedPromiseReturnsAPromise	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldForwardProgressEventsWhenIntermediaryCallbackTiedToAResolvedPromiseReturnsAPromise()$/;"	f
shouldForwardProgressEventsWhenIntermediaryCallbackTiedToAnUnresolvedPromiseReturnsAPromise	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldForwardProgressEventsWhenIntermediaryCallbackTiedToAnUnresolvedPromiseReturnsAPromise()$/;"	f
shouldForwardProgressWhenResolvedWithAnotherPromise	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldForwardProgressWhenResolvedWithAnotherPromise()$/;"	f
shouldIgnoreNonFunctionsAndTriggerPhpNotice	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldIgnoreNonFunctionsAndTriggerPhpNotice($var)$/;"	f
shouldProgress	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldProgress()$/;"	f
shouldPropagateCaughtExceptionValueAsProgress	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldPropagateCaughtExceptionValueAsProgress()$/;"	f
shouldPropagateProgressToDownstreamPromises	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldPropagateProgressToDownstreamPromises()$/;"	f
shouldPropagateTransformedProgressToDownstreamPromises	vendor/react/promise/tests/React/Promise/DeferredProgressTest.php	/^    public function shouldPropagateTransformedProgressToDownstreamPromises()$/;"	f
DeferredPromiseTest	vendor/react/promise/tests/React/Promise/DeferredPromiseTest.php	/^class DeferredPromiseTest extends TestCase$/;"	c
mock	vendor/react/promise/tests/React/Promise/DeferredPromiseTest.php	/^        $mock = $this->getMock('React\\\\Promise\\\\Deferred');$/;"	v
p	vendor/react/promise/tests/React/Promise/DeferredPromiseTest.php	/^        $p = new DeferredPromise($mock);$/;"	v
shouldForwardToDeferred	vendor/react/promise/tests/React/Promise/DeferredPromiseTest.php	/^    public function shouldForwardToDeferred()$/;"	f
DeferredRejectTest	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^class DeferredRejectTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^        $d = new Deferred();$/;"	v
errorCollector	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^        $errorCollector = new ErrorCollector();$/;"	v
mock	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldForwardReasonWhenCallbackIsNull	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldForwardReasonWhenCallbackIsNull()$/;"	f
shouldIgnoreNonFunctionsAndTriggerPhpNotice	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldIgnoreNonFunctionsAndTriggerPhpNotice($var)$/;"	f
shouldInvokeNewlyAddedErrbackWhenAlreadyRejected	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldInvokeNewlyAddedErrbackWhenAlreadyRejected()$/;"	f
shouldRejectWithAnImmediateValue	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldRejectWithAnImmediateValue()$/;"	f
shouldRejectWithFulfilledPromise	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldRejectWithFulfilledPromise()$/;"	f
shouldRejectWithRejectedPromise	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldRejectWithRejectedPromise()$/;"	f
shouldReturnAPromiseForTheRejectionValue	vendor/react/promise/tests/React/Promise/DeferredRejectTest.php	/^    public function shouldReturnAPromiseForTheRejectionValue()$/;"	f
DeferredResolveTest	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^class DeferredResolveTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^        $d = new Deferred();$/;"	v
errorCollector	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^        $errorCollector = new ErrorCollector();$/;"	v
mock	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldForwardValueWhenCallbackIsNull	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldForwardValueWhenCallbackIsNull()$/;"	f
shouldIgnoreNonFunctionsAndTriggerPhpNotice	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldIgnoreNonFunctionsAndTriggerPhpNotice($var)$/;"	f
shouldInvokeNewlyAddedCallbackWhenAlreadyResolved	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldInvokeNewlyAddedCallbackWhenAlreadyResolved()$/;"	f
shouldRejectWhenResolvedWithRejectedPromise	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldRejectWhenResolvedWithRejectedPromise()$/;"	f
shouldResolve	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldResolve()$/;"	f
shouldResolveWithPromisedValue	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldResolveWithPromisedValue()$/;"	f
shouldReturnAPromiseForAPromisedRejectionValue	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldReturnAPromiseForAPromisedRejectionValue()$/;"	f
shouldReturnAPromiseForAPromisedResolutionValue	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldReturnAPromiseForAPromisedResolutionValue()$/;"	f
shouldReturnAPromiseForTheResolutionValue	vendor/react/promise/tests/React/Promise/DeferredResolveTest.php	/^    public function shouldReturnAPromiseForTheResolutionValue()$/;"	f
DeferredResolverTest	vendor/react/promise/tests/React/Promise/DeferredResolverTest.php	/^class DeferredResolverTest extends TestCase$/;"	c
mock	vendor/react/promise/tests/React/Promise/DeferredResolverTest.php	/^        $mock = $this->getMock('React\\\\Promise\\\\Deferred');$/;"	v
p	vendor/react/promise/tests/React/Promise/DeferredResolverTest.php	/^        $p = new DeferredResolver($mock);$/;"	v
shouldForwardToDeferred	vendor/react/promise/tests/React/Promise/DeferredResolverTest.php	/^    public function shouldForwardToDeferred()$/;"	f
DeferredTest	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^class DeferredTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^        $d = new Deferred();$/;"	v
mock	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldReturnAPromiseForPassedInRejectionValueWhenAlreadyRejected	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnAPromiseForPassedInRejectionValueWhenAlreadyRejected()$/;"	f
shouldReturnAPromiseForPassedInRejectionValueWhenAlreadyResolved	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnAPromiseForPassedInRejectionValueWhenAlreadyResolved()$/;"	f
shouldReturnAPromiseForPassedInResolutionValueWhenAlreadyRejected	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnAPromiseForPassedInResolutionValueWhenAlreadyRejected()$/;"	f
shouldReturnAPromiseForPassedInResolutionValueWhenAlreadyResolved	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnAPromiseForPassedInResolutionValueWhenAlreadyResolved()$/;"	f
shouldReturnSilentlyOnProgressWhenAlreadyRejected	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnSilentlyOnProgressWhenAlreadyRejected()$/;"	f
shouldReturnSilentlyOnProgressWhenAlreadyResolved	vendor/react/promise/tests/React/Promise/DeferredTest.php	/^    public function shouldReturnSilentlyOnProgressWhenAlreadyResolved()$/;"	f
ErrorCollector	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^class ErrorCollector$/;"	c
assertCollectedError	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^    public function assertCollectedError($errstr, $errno)$/;"	f
errors	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^        $errors = array();$/;"	v
errors	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^        $this->errors = &$errors;$/;"	v
errors	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^        $this->errors = array();$/;"	v
errors	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^    private $errors = array();$/;"	v
message	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^        $message = 'Error with level ' . $errno . ' and message "' . $errstr . '" not found in ' . var_export($this->errors, true);$/;"	v
register	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^    public function register()$/;"	f
unregister	vendor/react/promise/tests/React/Promise/ErrorCollector.php	/^    public function unregister()$/;"	f
FulfilledPromiseTest	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^class FulfilledPromiseTest extends TestCase$/;"	c
exception	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^        $exception = new \\Exception();$/;"	v
mock	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^        $mock = $this->createCallableMock();$/;"	v
mock2	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^        $mock2 = $this->createCallableMock();$/;"	v
p	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^        $p = new FulfilledPromise();$/;"	v
p	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^        $p = new FulfilledPromise(1);$/;"	v
shouldForwardCallbackResultToNextCallback	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldForwardCallbackResultToNextCallback()$/;"	f
shouldForwardPromisedCallbackResultValueToNextCallback	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldForwardPromisedCallbackResultValueToNextCallback()$/;"	f
shouldForwardResultWhenCallbackIsNull	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldForwardResultWhenCallbackIsNull()$/;"	f
shouldReturnAPromise	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldReturnAPromise()$/;"	f
shouldReturnAllowNull	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldReturnAllowNull()$/;"	f
shouldSwitchFromCallbacksToErrbacksWhenCallbackReturnsARejection	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldSwitchFromCallbacksToErrbacksWhenCallbackReturnsARejection()$/;"	f
shouldSwitchFromCallbacksToErrbacksWhenCallbackThrows	vendor/react/promise/tests/React/Promise/FulfilledPromiseTest.php	/^    public function shouldSwitchFromCallbacksToErrbacksWhenCallbackThrows()$/;"	f
LazyPromiseTest	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^class LazyPromiseTest extends TestCase$/;"	c
errorHandler	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^        $errorHandler = $this->createCallableMock();$/;"	v
exception	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^        $exception = new \\Exception();$/;"	v
factory	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^        $factory = $this->createCallableMock();$/;"	v
fulfilledHandler	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^        $fulfilledHandler = $this->createCallableMock();$/;"	v
p	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^        $p = new LazyPromise($factory);$/;"	v
shouldCallFactoryIfThenIsInvoked	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^    public function shouldCallFactoryIfThenIsInvoked()$/;"	f
shouldNotCallFactoryIfThenIsNotInvoked	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^    public function shouldNotCallFactoryIfThenIsNotInvoked()$/;"	f
shouldReturnPromiseFromFactory	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^    public function shouldReturnPromiseFromFactory()$/;"	f
shouldReturnPromiseIfFactoryReturnsNull	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^    public function shouldReturnPromiseIfFactoryReturnsNull()$/;"	f
shouldReturnRejectedPromiseIfFactoryThrowsException	vendor/react/promise/tests/React/Promise/LazyPromiseTest.php	/^    public function shouldReturnRejectedPromiseIfFactoryThrowsException()$/;"	f
RejectedPromiseTest	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^class RejectedPromiseTest extends TestCase$/;"	c
exception	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^        $exception = new \\Exception();$/;"	v
mock	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^        $mock = $this->createCallableMock();$/;"	v
mock2	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^        $mock2 = $this->createCallableMock();$/;"	v
p	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^        $p = new RejectedPromise();$/;"	v
p	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^        $p = new RejectedPromise(1);$/;"	v
shouldForwardUndefinedRejectionValue	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldForwardUndefinedRejectionValue()$/;"	f
shouldPropagateRejectionsWhenErrbackReturnsARejection	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldPropagateRejectionsWhenErrbackReturnsARejection()$/;"	f
shouldPropagateRejectionsWhenErrbackThrows	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldPropagateRejectionsWhenErrbackThrows()$/;"	f
shouldReturnAPromise	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldReturnAPromise()$/;"	f
shouldReturnAllowNull	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldReturnAllowNull()$/;"	f
shouldSwitchFromErrbacksToCallbacksWhenErrbackDoesNotExplicitlyPropagate	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldSwitchFromErrbacksToCallbacksWhenErrbackDoesNotExplicitlyPropagate()$/;"	f
shouldSwitchFromErrbacksToCallbacksWhenErrbackReturnsAResolution	vendor/react/promise/tests/React/Promise/RejectedPromiseTest.php	/^    public function shouldSwitchFromErrbacksToCallbacksWhenErrbackReturnsAResolution()$/;"	f
CallableStub	vendor/react/promise/tests/React/Promise/Stub/CallableStub.php	/^class CallableStub$/;"	c
__invoke	vendor/react/promise/tests/React/Promise/Stub/CallableStub.php	/^    public function __invoke()$/;"	f
TestCase	vendor/react/promise/tests/React/Promise/TestCase.php	/^class TestCase extends \\PHPUnit_Framework_TestCase$/;"	c
createCallableMock	vendor/react/promise/tests/React/Promise/TestCase.php	/^    public function createCallableMock()$/;"	f
expectCallableExactly	vendor/react/promise/tests/React/Promise/TestCase.php	/^    public function expectCallableExactly($amount)$/;"	f
expectCallableNever	vendor/react/promise/tests/React/Promise/TestCase.php	/^    public function expectCallableNever()$/;"	f
expectCallableOnce	vendor/react/promise/tests/React/Promise/TestCase.php	/^    public function expectCallableOnce()$/;"	f
invalidCallbackDataProvider	vendor/react/promise/tests/React/Promise/TestCase.php	/^    public function invalidCallbackDataProvider()$/;"	f
mock	vendor/react/promise/tests/React/Promise/TestCase.php	/^        $mock = $this->createCallableMock();$/;"	v
UtilPromiseForTest	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^class UtilPromiseForTest extends TestCase$/;"	c
expected	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^        $expected = 123;$/;"	v
mock	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^        $mock = $this->createCallableMock();$/;"	v
resolved	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^        $resolved = new FulfilledPromise($expected);$/;"	v
resolved	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^        $resolved = new RejectedPromise($expected);$/;"	v
shouldRejectARejectedPromise	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^    public function shouldRejectARejectedPromise()$/;"	f
shouldResolveAFulfilledPromise	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^    public function shouldResolveAFulfilledPromise()$/;"	f
shouldResolveAnImmediateValue	vendor/react/promise/tests/React/Promise/UtilPromiseForTest.php	/^    public function shouldResolveAnImmediateValue()$/;"	f
UtilRejectedPromiseForTest	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^class UtilRejectedPromiseForTest extends TestCase$/;"	c
expected	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^        $expected = 123;$/;"	v
mock	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^        $mock = $this->createCallableMock();$/;"	v
resolved	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^        $resolved = new FulfilledPromise($expected);$/;"	v
resolved	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^        $resolved = new RejectedPromise($expected);$/;"	v
shouldRejectWithAnImmediateValue	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^    public function shouldRejectWithAnImmediateValue()$/;"	f
shouldRejectWithFulfilledPromise	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^    public function shouldRejectWithFulfilledPromise()$/;"	f
shouldRejectWithRejectedPromise	vendor/react/promise/tests/React/Promise/UtilRejectedPromiseForTest.php	/^    public function shouldRejectWithRejectedPromise()$/;"	f
WhenAllTest	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^class WhenAllTest extends TestCase$/;"	c
mock	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldAcceptAPromiseForAnArray	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldAcceptAPromiseForAnArray()$/;"	f
shouldRejectIfAnyInputPromiseRejects	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldRejectIfAnyInputPromiseRejects()$/;"	f
shouldResolveEmptyInput	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldResolveEmptyInput()$/;"	f
shouldResolvePromisesArray	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldResolvePromisesArray()$/;"	f
shouldResolveSparseArrayInput	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldResolveSparseArrayInput()$/;"	f
shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray()$/;"	f
shouldResolveValuesArray	vendor/react/promise/tests/React/Promise/WhenAllTest.php	/^    public function shouldResolveValuesArray()$/;"	f
WhenAnyTest	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^class WhenAnyTest extends TestCase$/;"	c
d1	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^        $d1 = new Deferred();$/;"	v
d2	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^        $d2 = new Deferred();$/;"	v
mock	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldAcceptAPromiseForAnArray	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldAcceptAPromiseForAnArray()$/;"	f
shouldNotRelyOnArryIndexesWhenUnwrappingToASingleResolutionValue	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldNotRelyOnArryIndexesWhenUnwrappingToASingleResolutionValue()$/;"	f
shouldRejectWithAllRejectedInputValuesIfAllInputsAreRejected	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldRejectWithAllRejectedInputValuesIfAllInputsAreRejected()$/;"	f
shouldResolveToNullArrayWhenInputPromiseDoesNotResolveToArray	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldResolveToNullArrayWhenInputPromiseDoesNotResolveToArray()$/;"	f
shouldResolveToNullWithEmptyInputArray	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldResolveToNullWithEmptyInputArray()$/;"	f
shouldResolveWhenFirstInputPromiseResolves	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldResolveWhenFirstInputPromiseResolves()$/;"	f
shouldResolveWithAPromisedInputValue	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldResolveWithAPromisedInputValue()$/;"	f
shouldResolveWithAnInputValue	vendor/react/promise/tests/React/Promise/WhenAnyTest.php	/^    public function shouldResolveWithAnInputValue()$/;"	f
WhenLazyTest	vendor/react/promise/tests/React/Promise/WhenLazyTest.php	/^class WhenLazyTest extends TestCase$/;"	c
factory	vendor/react/promise/tests/React/Promise/WhenLazyTest.php	/^        $factory = $this->createCallableMock();$/;"	v
shouldCallFactoryIfThenIsInvoked	vendor/react/promise/tests/React/Promise/WhenLazyTest.php	/^    public function shouldCallFactoryIfThenIsInvoked()$/;"	f
shouldReturnALazyPromise	vendor/react/promise/tests/React/Promise/WhenLazyTest.php	/^    public function shouldReturnALazyPromise()$/;"	f
WhenMapTest	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^class WhenMapTest extends TestCase$/;"	c
mapper	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    protected function mapper()$/;"	f
mock	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^        $mock = $this->createCallableMock();$/;"	v
promiseMapper	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    protected function promiseMapper()$/;"	f
shouldAcceptAPromiseForAnArray	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldAcceptAPromiseForAnArray()$/;"	f
shouldMapInputPromisesArray	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldMapInputPromisesArray()$/;"	f
shouldMapInputValuesArray	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldMapInputValuesArray()$/;"	f
shouldMapInputWhenMapperReturnsAPromise	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldMapInputWhenMapperReturnsAPromise()$/;"	f
shouldMapMixedInputArray	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldMapMixedInputArray()$/;"	f
shouldRejectWhenInputContainsRejection	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldRejectWhenInputContainsRejection()$/;"	f
shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray	vendor/react/promise/tests/React/Promise/WhenMapTest.php	/^    public function shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray()$/;"	f
WhenReduceTest	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^class WhenReduceTest extends TestCase$/;"	c
append	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    protected function append()$/;"	f
d1	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^        $d1 = new Deferred();$/;"	v
d2	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^        $d2 = new Deferred();$/;"	v
d3	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^        $d3 = new Deferred();$/;"	v
insertIntoArray	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^        $insertIntoArray = function ($arr, $val, $i) {$/;"	v
mock	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^        $mock = $this->createCallableMock();$/;"	v
plus	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    protected function plus()$/;"	f
shouldAcceptAPromiseForAnArray	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldAcceptAPromiseForAnArray()$/;"	f
shouldAllowSparseArrayInputWithInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldAllowSparseArrayInputWithInitialValue()$/;"	f
shouldAllowSparseArrayInputWithoutInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldAllowSparseArrayInputWithoutInitialValue()$/;"	f
shouldProvideCorrectBasisValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldProvideCorrectBasisValue()$/;"	f
shouldReduceEmptyInputWithInitialPromise	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceEmptyInputWithInitialPromise()$/;"	f
shouldReduceEmptyInputWithInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceEmptyInputWithInitialValue()$/;"	f
shouldReduceInInputOrder	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceInInputOrder()$/;"	f
shouldReducePromisedValuesWithInitialPromise	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReducePromisedValuesWithInitialPromise()$/;"	f
shouldReducePromisedValuesWithInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReducePromisedValuesWithInitialValue()$/;"	f
shouldReducePromisedValuesWithoutInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReducePromisedValuesWithoutInitialValue()$/;"	f
shouldReduceValuesWithInitialPromise	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceValuesWithInitialPromise()$/;"	f
shouldReduceValuesWithInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceValuesWithInitialValue()$/;"	f
shouldReduceValuesWithoutInitialValue	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldReduceValuesWithoutInitialValue()$/;"	f
shouldRejectWhenInputContainsRejection	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldRejectWhenInputContainsRejection()$/;"	f
shouldResolveToInitialValueWhenInputPromiseDoesNotResolveToAnArray	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldResolveToInitialValueWhenInputPromiseDoesNotResolveToAnArray()$/;"	f
shouldResolveWithNullWhenInputIsEmptyAndNoInitialValueOrPromiseProvided	vendor/react/promise/tests/React/Promise/WhenReduceTest.php	/^    public function shouldResolveWithNullWhenInputIsEmptyAndNoInitialValueOrPromiseProvided()$/;"	f
WhenRejectTest	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^class WhenRejectTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^        $d = new Deferred();$/;"	v
expected	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^        $expected = 123;$/;"	v
mock	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldRejectARejectedPromise	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^    public function shouldRejectARejectedPromise()$/;"	f
shouldRejectAResolvedPromise	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^    public function shouldRejectAResolvedPromise()$/;"	f
shouldRejectAnImmediateValue	vendor/react/promise/tests/React/Promise/WhenRejectTest.php	/^    public function shouldRejectAnImmediateValue()$/;"	f
WhenResolveTest	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^class WhenResolveTest extends TestCase$/;"	c
d	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^            $d = new Deferred();$/;"	v
d	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^        $d = new Deferred();$/;"	v
expected	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^        $expected = 123;$/;"	v
identity	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^            $identity = function ($val) {$/;"	v
mock	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^        $mock = $this->createCallableMock();$/;"	v
result	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^        $result = When::resolve(When::resolve($d->then(function ($val) {$/;"	v
shouldRejectARejectedPromise	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^    public function shouldRejectARejectedPromise()$/;"	f
shouldResolveAResolvedPromise	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^    public function shouldResolveAResolvedPromise()$/;"	f
shouldResolveAnImmediateValue	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^    public function shouldResolveAnImmediateValue()$/;"	f
shouldSupportDeepNestingInPromiseChains	vendor/react/promise/tests/React/Promise/WhenResolveTest.php	/^    public function shouldSupportDeepNestingInPromiseChains()$/;"	f
WhenSomeTest	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^class WhenSomeTest extends TestCase$/;"	c
mock	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^        $mock = $this->createCallableMock();$/;"	v
shouldAcceptAPromiseForAnArray	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldAcceptAPromiseForAnArray()$/;"	f
shouldRejectIfAnyInputPromiseRejectsBeforeDesiredNumberOfInputsAreResolved	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldRejectIfAnyInputPromiseRejectsBeforeDesiredNumberOfInputsAreResolved()$/;"	f
shouldResolveEmptyInput	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldResolveEmptyInput()$/;"	f
shouldResolvePromisesArray	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldResolvePromisesArray()$/;"	f
shouldResolveSparseArrayInput	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldResolveSparseArrayInput()$/;"	f
shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldResolveToEmptyArrayWhenInputPromiseDoesNotResolveToArray()$/;"	f
shouldResolveValuesArray	vendor/react/promise/tests/React/Promise/WhenSomeTest.php	/^    public function shouldResolveValuesArray()$/;"	f
loader	vendor/react/promise/tests/bootstrap.php	/^$loader = require __DIR__.'\/..\/vendor\/autoload.php';$/;"	v
Bench	vendor/react/react/benchmark/bench.php	/^class Bench {$/;"	c
bench	vendor/react/react/benchmark/bench.php	/^            $bench = new Bench();$/;"	v
benchLoops	vendor/react/react/benchmark/bench.php	/^function benchLoops(array $tests) {$/;"	f
current	vendor/react/react/benchmark/bench.php	/^        $current = microtime(true);$/;"	v
loop	vendor/react/react/benchmark/bench.php	/^            $loop = new $loopClass();$/;"	v
loopClass	vendor/react/react/benchmark/bench.php	/^            $loopClass = "React\\\\EventLoop\\\\$loopName";$/;"	v
loops	vendor/react/react/benchmark/bench.php	/^    $loops = array($/;"	v
prev	vendor/react/react/benchmark/bench.php	/^        $prev = $this->prev;$/;"	v
prev	vendor/react/react/benchmark/bench.php	/^        $this->prev = $current;$/;"	v
prev	vendor/react/react/benchmark/bench.php	/^        $this->prev = microtime(true);$/;"	v
prev	vendor/react/react/benchmark/bench.php	/^    private $prev;$/;"	v
printSnap	vendor/react/react/benchmark/bench.php	/^    public function printSnap($name) {$/;"	f
snap	vendor/react/react/benchmark/bench.php	/^    public function snap() {$/;"	f
start	vendor/react/react/benchmark/bench.php	/^    public function start() {$/;"	f
tests	vendor/react/react/benchmark/timers.php	/^$tests = array($/;"	v
x	vendor/react/react/benchmark/timers.php	/^$x = 1000;$/;"	v
dns	vendor/react/react/examples/dns-resolver.php	/^$dns = $factory->create('8.8.8.8', $loop);$/;"	v
domain	vendor/react/react/examples/dns-resolver.php	/^$domain = 'igor.io';$/;"	v
factory	vendor/react/react/examples/dns-resolver.php	/^$factory = new React\\Dns\\Resolver\\Factory();$/;"	v
loop	vendor/react/react/examples/dns-resolver.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
loop	vendor/react/react/examples/echo-server.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
socket	vendor/react/react/examples/echo-server.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
author	vendor/react/react/examples/http-client.php	/^        $author = $latest['author']['name'];$/;"	v
buffer	vendor/react/react/examples/http-client.php	/^    $buffer = '';$/;"	v
client	vendor/react/react/examples/http-client.php	/^$client = $factory->create($loop, $dnsResolver);$/;"	v
date	vendor/react/react/examples/http-client.php	/^        $date = date('F j, Y', strtotime($latest['author']['date']));$/;"	v
decoded	vendor/react/react/examples/http-client.php	/^        $decoded = json_decode($buffer, true);$/;"	v
dnsResolver	vendor/react/react/examples/http-client.php	/^$dnsResolver = $dnsResolverFactory->createCached('8.8.8.8', $loop);$/;"	v
dnsResolverFactory	vendor/react/react/examples/http-client.php	/^$dnsResolverFactory = new React\\Dns\\Resolver\\Factory();$/;"	v
factory	vendor/react/react/examples/http-client.php	/^$factory = new React\\HttpClient\\Factory();$/;"	v
latest	vendor/react/react/examples/http-client.php	/^        $latest = $decoded[0]['commit'];$/;"	v
loop	vendor/react/react/examples/http-client.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
request	vendor/react/react/examples/http-client.php	/^$request = $client->request('GET', 'https:\/\/api.github.com\/repos\/reactphp\/react\/commits');$/;"	v
buffers	vendor/react/react/examples/parallel-download.php	/^$buffers = array();$/;"	v
files	vendor/react/react/examples/parallel-download.php	/^$files = array($/;"	v
formatted	vendor/react/react/examples/parallel-download.php	/^        $formatted = number_format($mbytes, 3);$/;"	v
loop	vendor/react/react/examples/parallel-download.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
mbytes	vendor/react/react/examples/parallel-download.php	/^        $mbytes = filesize($file) \/ (1024 * 1024);$/;"	v
read	vendor/react/react/examples/parallel-download.php	/^    $read = new React\\Stream\\Stream($readStream, $loop);$/;"	v
readStream	vendor/react/react/examples/parallel-download.php	/^    $readStream = fopen($url, 'r');$/;"	v
write	vendor/react/react/examples/parallel-download.php	/^    $write = new React\\Stream\\Stream($writeStream, $loop);$/;"	v
writeStream	vendor/react/react/examples/parallel-download.php	/^    $writeStream = fopen($file, 'w');$/;"	v
loop	vendor/react/react/examples/pump-shitload-of-data.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
shitload	vendor/react/react/examples/pump-shitload-of-data.php	/^    $shitload = str_repeat('a', 1024*1024*32);$/;"	v
socket	vendor/react/react/examples/pump-shitload-of-data.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
c	vendor/react/react/examples/scalability.php	/^        $c=stream_socket_accept($s);$/;"	v
len	vendor/react/react/examples/scalability.php	/^        $len=strlen($i)+4;$/;"	v
loop	vendor/react/react/examples/scalability.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
s	vendor/react/react/examples/scalability.php	/^    $s=stream_socket_server('tcp:\/\/127.0.0.1:'.(8000+$i));$/;"	v
conns	vendor/react/react/examples/tcp-chat.php	/^$conns = new \\SplObjectStorage();$/;"	v
loop	vendor/react/react/examples/tcp-chat.php	/^$loop = React\\EventLoop\\Factory::create();$/;"	v
socket	vendor/react/react/examples/tcp-chat.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
i	vendor/react/react/examples/test-close-conn.php	/^$i      = 0;$/;"	v
loop	vendor/react/react/examples/test-close-conn.php	/^$loop   = new React\\EventLoop\\LibEvLoop();$/;"	v
socket	vendor/react/react/examples/test-close-conn.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
http	vendor/react/react/examples/test-memory-http.php	/^$http = new React\\Http\\Server($socket, $loop);$/;"	v
i	vendor/react/react/examples/test-memory-http.php	/^$i = 0;$/;"	v
kmem	vendor/react/react/examples/test-memory-http.php	/^    $kmem = memory_get_usage(true) \/ 1024;$/;"	v
loop	vendor/react/react/examples/test-memory-http.php	/^$loop = new React\\EventLoop\\StreamSelectLoop();$/;"	v
socket	vendor/react/react/examples/test-memory-http.php	/^$socket = new React\\Socket\\Server($loop);$/;"	v
i	vendor/react/react/examples/test-memory.php	/^$i = 0;$/;"	v
kmem	vendor/react/react/examples/test-memory.php	/^    $kmem = memory_get_usage(true) \/ 1024;$/;"	v
loop	vendor/react/react/examples/test-memory.php	/^$loop = new React\\EventLoop\\StreamSelectLoop();$/;"	v
say	vendor/react/react/scripts/git-subsplit.sh	/^say()$/;"	f
subsplit_init	vendor/react/react/scripts/git-subsplit.sh	/^subsplit_init()$/;"	f
subsplit_main	vendor/react/react/scripts/git-subsplit.sh	/^subsplit_main()$/;"	f
subsplit_publish	vendor/react/react/scripts/git-subsplit.sh	/^subsplit_publish()$/;"	f
subsplit_require_work_dir	vendor/react/react/scripts/git-subsplit.sh	/^subsplit_require_work_dir()$/;"	f
subsplit_update	vendor/react/react/scripts/git-subsplit.sh	/^subsplit_update()$/;"	f
ArrayCache	vendor/react/react/src/React/Cache/ArrayCache.php	/^class ArrayCache implements CacheInterface$/;"	c
data	vendor/react/react/src/React/Cache/ArrayCache.php	/^    private $data = array();$/;"	v
get	vendor/react/react/src/React/Cache/ArrayCache.php	/^    public function get($key)$/;"	f
remove	vendor/react/react/src/React/Cache/ArrayCache.php	/^    public function remove($key)$/;"	f
set	vendor/react/react/src/React/Cache/ArrayCache.php	/^    public function set($key, $value)$/;"	f
CacheInterface	vendor/react/react/src/React/Cache/CacheInterface.php	/^interface CacheInterface$/;"	i
get	vendor/react/react/src/React/Cache/CacheInterface.php	/^    public function get($key);$/;"	f
remove	vendor/react/react/src/React/Cache/CacheInterface.php	/^    public function remove($key);$/;"	f
set	vendor/react/react/src/React/Cache/CacheInterface.php	/^    public function set($key, $value);$/;"	f
BadServerException	vendor/react/react/src/React/Dns/BadServerException.php	/^class BadServerException extends \\Exception$/;"	c
Config	vendor/react/react/src/React/Dns/Config/Config.php	/^class Config$/;"	c
nameservers	vendor/react/react/src/React/Dns/Config/Config.php	/^    public $nameservers = array();$/;"	v
FilesystemFactory	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^class FilesystemFactory$/;"	c
__construct	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^    public function __construct(LoopInterface $loop)$/;"	f
config	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^        $config = new Config();$/;"	v
contents	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^            $contents = '';$/;"	v
contents	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^        $contents = preg_replace('\/^#\/', '', $contents);$/;"	v
create	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^    public function create($filename)$/;"	f
deferred	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^            $deferred = new Deferred();$/;"	v
fd	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^            $fd = fopen($filename, 'r');$/;"	v
lines	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^        $lines = preg_split('\/\\r?\\n\/is', $contents);$/;"	v
loadEtcResolvConf	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^    public function loadEtcResolvConf($filename)$/;"	f
loop	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^    private $loop;$/;"	v
nameservers	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^        $nameservers = array();$/;"	v
parseEtcResolvConf	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^    public function parseEtcResolvConf($contents)$/;"	f
stream	vendor/react/react/src/React/Dns/Config/FilesystemFactory.php	/^            $stream = new Stream($fd, $this->loop);$/;"	v
HeaderBag	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^class HeaderBag$/;"	c
attributes	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public $attributes = array($/;"	v
data	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public $data = '';$/;"	v
get	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function get($name)$/;"	f
isQuery	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function isQuery()$/;"	f
isResponse	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function isResponse()$/;"	f
isTruncated	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function isTruncated()$/;"	f
populateCounts	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function populateCounts(Message $message)$/;"	f
set	vendor/react/react/src/React/Dns/Model/HeaderBag.php	/^    public function set($name, $value)$/;"	f
Message	vendor/react/react/src/React/Dns/Model/Message.php	/^class Message$/;"	c
__construct	vendor/react/react/src/React/Dns/Model/Message.php	/^    public function __construct()$/;"	f
additional	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $additional = array();$/;"	v
answers	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $answers = array();$/;"	v
authority	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $authority = array();$/;"	v
consumed	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $consumed = 0;$/;"	v
data	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $data = '';$/;"	v
header	vendor/react/react/src/React/Dns/Model/Message.php	/^        $this->header = new HeaderBag();$/;"	v
header	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $header;$/;"	v
prepare	vendor/react/react/src/React/Dns/Model/Message.php	/^    public function prepare()$/;"	f
questions	vendor/react/react/src/React/Dns/Model/Message.php	/^    public $questions = array();$/;"	v
Record	vendor/react/react/src/React/Dns/Model/Record.php	/^class Record$/;"	c
__construct	vendor/react/react/src/React/Dns/Model/Record.php	/^    public function __construct($name, $type, $class, $ttl = 0, $data = null)$/;"	f
class	vendor/react/react/src/React/Dns/Model/Record.php	/^        $this->class    = $class;$/;"	v
class	vendor/react/react/src/React/Dns/Model/Record.php	/^    public $class;$/;"	v
data	vendor/react/react/src/React/Dns/Model/Record.php	/^        $this->data     = $data;$/;"	v
data	vendor/react/react/src/React/Dns/Model/Record.php	/^    public $data;$/;"	v
name	vendor/react/react/src/React/Dns/Model/Record.php	/^        $this->name     = $name;$/;"	v
name	vendor/react/react/src/React/Dns/Model/Record.php	/^    public $name;$/;"	v
ttl	vendor/react/react/src/React/Dns/Model/Record.php	/^        $this->ttl      = $ttl;$/;"	v
ttl	vendor/react/react/src/React/Dns/Model/Record.php	/^    public $ttl;$/;"	v
type	vendor/react/react/src/React/Dns/Model/Record.php	/^        $this->type     = $type;$/;"	v
type	vendor/react/react/src/React/Dns/Model/Record.php	/^    public $type;$/;"	v
BinaryDumper	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^class BinaryDumper$/;"	c
data	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $data = '';$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 1) | $header->get('aa');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 1) | $header->get('qr');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 1) | $header->get('ra');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 1) | $header->get('rd');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 1) | $header->get('tc');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 3) | $header->get('z');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 4) | $header->get('opcode');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = ($flags << 4) | $header->get('rcode');$/;"	v
flags	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^        $flags = 0x00;$/;"	v
headerToBinary	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^    private function headerToBinary(HeaderBag $header)$/;"	f
labels	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^            $labels = explode('.', $question['name']);$/;"	v
questionToBinary	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^    private function questionToBinary(array $questions)$/;"	f
toBinary	vendor/react/react/src/React/Dns/Protocol/BinaryDumper.php	/^    public function toBinary(Message $message)$/;"	f
Parser	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^class Parser$/;"	c
aa	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $aa = ($fields >> 10) & 1;$/;"	v
consumed	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $consumed = $message->consumed;$/;"	v
getCompressedLabel	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function getCompressedLabel($data, $consumed)$/;"	f
getCompressedLabelOffset	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function getCompressedLabelOffset($data, $consumed)$/;"	f
header	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $header = substr($message->data, 0, 12);$/;"	v
ip	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^            $ip = substr($message->data, $consumed, $rdLength);$/;"	v
isCompressedLabel	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function isCompressedLabel($data, $consumed)$/;"	f
isEndOfLabels	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function isEndOfLabels($data, $consumed)$/;"	f
labels	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^                $labels = array_merge($labels, $newLabels);$/;"	v
labels	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $labels = array();$/;"	v
length	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^            $length = ord(substr($data, $consumed, 1));$/;"	v
length	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $length = ord(substr($data, $consumed, 1));$/;"	v
mask	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $mask = 0x3fff; \/\/ 0011111111111111$/;"	v
mask	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $mask = 0xc000; \/\/ 1100000000000000$/;"	v
name	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $name = implode('.', $labels);$/;"	v
opcode	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $opcode = ($fields >> 11) & bindec('1111');$/;"	v
parseAnswer	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function parseAnswer(Message $message)$/;"	f
parseChunk	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function parseChunk($data, Message $message)$/;"	f
parseHeader	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function parseHeader(Message $message)$/;"	f
parseQuestion	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function parseQuestion(Message $message)$/;"	f
qr	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $qr = ($fields >> 15) & 1;$/;"	v
ra	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $ra = ($fields >> 7) & 1;$/;"	v
rcode	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $rcode = $fields & bindec('1111');$/;"	v
rd	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $rd = ($fields >> 8) & 1;$/;"	v
rdata	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^            $rdata = implode('.', $bodyLabels);$/;"	v
rdata	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^            $rdata = inet_ntop($ip);$/;"	v
rdata	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $rdata = null;$/;"	v
readLabels	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    private function readLabels($data, $consumed)$/;"	f
record	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $record = new Record($name, $type, $class, $ttl, $rdata);$/;"	v
signedLongToUnsignedLong	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^    public function signedLongToUnsignedLong($i)$/;"	f
tc	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $tc = ($fields >> 9) & 1;$/;"	v
ttl	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $ttl = $this->signedLongToUnsignedLong($ttl);$/;"	v
vars	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $vars = compact('id', 'qdCount', 'anCount', 'nsCount', 'arCount',$/;"	v
z	vendor/react/react/src/React/Dns/Protocol/Parser.php	/^        $z = ($fields >> 4) & bindec('111');$/;"	v
CachedExecutor	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^class CachedExecutor implements ExecutorInterface$/;"	c
__construct	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    public function __construct(ExecutorInterface $executor, RecordCache $cache)$/;"	f
buildResponse	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    public function buildResponse(Query $query, array $cachedRecords)$/;"	f
cache	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $cache = $this->cache;$/;"	v
cache	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $this->cache = $cache;$/;"	v
cache	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    private $cache;$/;"	v
executor	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $executor = $this->executor;$/;"	v
executor	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $this->executor = $executor;$/;"	v
executor	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    private $executor;$/;"	v
generateId	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    protected function generateId()$/;"	f
query	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^    public function query($nameserver, Query $query)$/;"	f
response	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $response = new Message();$/;"	v
that	vendor/react/react/src/React/Dns/Query/CachedExecutor.php	/^        $that = $this;$/;"	v
Executor	vendor/react/react/src/React/Dns/Query/Executor.php	/^class Executor implements ExecutorInterface$/;"	c
__construct	vendor/react/react/src/React/Dns/Query/Executor.php	/^    public function __construct(LoopInterface $loop, Parser $parser, BinaryDumper $dumper, $timeout = 5)$/;"	f
conn	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $conn = $this->createConnection($nameserver, $transport);$/;"	v
conn	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $conn = new Connection($fd, $this->loop);$/;"	v
createConnection	vendor/react/react/src/React/Dns/Query/Executor.php	/^    protected function createConnection($nameserver, $transport)$/;"	f
deferred	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $deferred = new Deferred();$/;"	v
doQuery	vendor/react/react/src/React/Dns/Query/Executor.php	/^    public function doQuery($nameserver, $transport, $queryData, $name)$/;"	f
dumper	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $this->dumper = $dumper;$/;"	v
dumper	vendor/react/react/src/React/Dns/Query/Executor.php	/^    private $dumper;$/;"	v
fd	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $fd = stream_socket_client("$transport:\/\/$nameserver");$/;"	v
generateId	vendor/react/react/src/React/Dns/Query/Executor.php	/^    protected function generateId()$/;"	f
loop	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $loop = $this->loop;$/;"	v
loop	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/Dns/Query/Executor.php	/^    private $loop;$/;"	v
parser	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $parser = $this->parser;$/;"	v
parser	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $this->parser = $parser;$/;"	v
parser	vendor/react/react/src/React/Dns/Query/Executor.php	/^    private $parser;$/;"	v
prepareRequest	vendor/react/react/src/React/Dns/Query/Executor.php	/^    public function prepareRequest(Query $query)$/;"	f
query	vendor/react/react/src/React/Dns/Query/Executor.php	/^    public function query($nameserver, Query $query)$/;"	f
queryData	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $queryData = $this->dumper->toBinary($request);$/;"	v
request	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $request = $this->prepareRequest($query);$/;"	v
request	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $request = new Message();$/;"	v
response	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $response = new Message();$/;"	v
responseReady	vendor/react/react/src/React/Dns/Query/Executor.php	/^            $responseReady = $parser->parseChunk($data, $response);$/;"	v
retryWithTcp	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $retryWithTcp = function () use ($that, $nameserver, $queryData, $name) {$/;"	v
that	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $that = $this;$/;"	v
timeout	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $this->timeout = $timeout;$/;"	v
timeout	vendor/react/react/src/React/Dns/Query/Executor.php	/^    private $timeout;$/;"	v
timer	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $timer = $this->loop->addTimer($this->timeout, function () use (&$conn, $name, $deferred) {$/;"	v
transport	vendor/react/react/src/React/Dns/Query/Executor.php	/^        $transport = strlen($queryData) > 512 ? 'tcp' : 'udp';$/;"	v
ExecutorInterface	vendor/react/react/src/React/Dns/Query/ExecutorInterface.php	/^interface ExecutorInterface$/;"	i
query	vendor/react/react/src/React/Dns/Query/ExecutorInterface.php	/^    public function query($nameserver, Query $query);$/;"	f
Query	vendor/react/react/src/React/Dns/Query/Query.php	/^class Query$/;"	c
__construct	vendor/react/react/src/React/Dns/Query/Query.php	/^    public function __construct($name, $type, $class, $currentTime)$/;"	f
class	vendor/react/react/src/React/Dns/Query/Query.php	/^        $this->class = $class;$/;"	v
class	vendor/react/react/src/React/Dns/Query/Query.php	/^    public $class;$/;"	v
currentTime	vendor/react/react/src/React/Dns/Query/Query.php	/^        $this->currentTime = $currentTime;$/;"	v
currentTime	vendor/react/react/src/React/Dns/Query/Query.php	/^    public $currentTime;$/;"	v
name	vendor/react/react/src/React/Dns/Query/Query.php	/^        $this->name = $name;$/;"	v
name	vendor/react/react/src/React/Dns/Query/Query.php	/^    public $name;$/;"	v
type	vendor/react/react/src/React/Dns/Query/Query.php	/^        $this->type = $type;$/;"	v
type	vendor/react/react/src/React/Dns/Query/Query.php	/^    public $type;$/;"	v
RecordBag	vendor/react/react/src/React/Dns/Query/RecordBag.php	/^class RecordBag$/;"	c
all	vendor/react/react/src/React/Dns/Query/RecordBag.php	/^    public function all()$/;"	f
records	vendor/react/react/src/React/Dns/Query/RecordBag.php	/^    private $records = array();$/;"	v
set	vendor/react/react/src/React/Dns/Query/RecordBag.php	/^    public function set($currentTime, Record $record)$/;"	f
RecordCache	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^class RecordCache$/;"	c
__construct	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function __construct(CacheInterface $cache)$/;"	f
cache	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $cache = $this->cache;$/;"	v
cache	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $this->cache = $cache;$/;"	v
cache	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    private $cache;$/;"	v
expire	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function expire($currentTime)$/;"	f
expiredAt	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $expiredAt = $this->expiredAt;$/;"	v
expiredAt	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $this->expiredAt = $currentTime;$/;"	v
expiredAt	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    private $expiredAt;$/;"	v
id	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $id = $this->serializeQueryToIdentity($query);$/;"	v
id	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^        $id = $this->serializeRecordToIdentity($record);$/;"	v
lookup	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function lookup(Query $query)$/;"	f
recordBag	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^                $recordBag = unserialize($value);$/;"	v
serializeQueryToIdentity	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function serializeQueryToIdentity(Query $query)$/;"	f
serializeRecordToIdentity	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function serializeRecordToIdentity(Record $record)$/;"	f
storeRecord	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function storeRecord($currentTime, Record $record)$/;"	f
storeResponseMessage	vendor/react/react/src/React/Dns/Query/RecordCache.php	/^    public function storeResponseMessage($currentTime, Message $message)$/;"	f
RetryExecutor	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^class RetryExecutor implements ExecutorInterface$/;"	c
__construct	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^    public function __construct(ExecutorInterface $executor, $retries = 2)$/;"	f
deferred	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^        $deferred = new Deferred();$/;"	v
error	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^                $error = new \\RuntimeException($/;"	v
errorback	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^        $errorback = function ($error) use ($nameserver, $query, $retries, $resolver, $that) {$/;"	v
executor	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^        $this->executor = $executor;$/;"	v
executor	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^    private $executor;$/;"	v
query	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^    public function query($nameserver, Query $query)$/;"	f
retries	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^        $this->retries = $retries;$/;"	v
retries	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^    private $retries;$/;"	v
that	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^        $that = $this;$/;"	v
tryQuery	vendor/react/react/src/React/Dns/Query/RetryExecutor.php	/^    public function tryQuery($nameserver, Query $query, $retries, $resolver)$/;"	f
TimeoutException	vendor/react/react/src/React/Dns/Query/TimeoutException.php	/^class TimeoutException extends \\Exception$/;"	c
RecordNotFoundException	vendor/react/react/src/React/Dns/RecordNotFoundException.php	/^class RecordNotFoundException extends \\Exception$/;"	c
Factory	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^class Factory$/;"	c
addPortToServerIfMissing	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    protected function addPortToServerIfMissing($nameserver)$/;"	f
create	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    public function create($nameserver, LoopInterface $loop)$/;"	f
createCached	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    public function createCached($nameserver, LoopInterface $loop)$/;"	f
createCachedExecutor	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    protected function createCachedExecutor(LoopInterface $loop)$/;"	f
createExecutor	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    protected function createExecutor(LoopInterface $loop)$/;"	f
createRetryExecutor	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^    protected function createRetryExecutor(LoopInterface $loop)$/;"	f
executor	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^        $executor = $this->createCachedExecutor($loop);$/;"	v
executor	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^        $executor = $this->createRetryExecutor($loop);$/;"	v
nameserver	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^            $nameserver = '[' . $nameserver . ']';$/;"	v
nameserver	vendor/react/react/src/React/Dns/Resolver/Factory.php	/^        $nameserver = $this->addPortToServerIfMissing($nameserver);$/;"	v
Resolver	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^class Resolver$/;"	c
__construct	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    public function __construct($nameserver, ExecutorInterface $executor)$/;"	f
address	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $address = $answer->data;$/;"	v
answer	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $answer = $filteredAnswers[array_rand($filteredAnswers)];$/;"	v
answer	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $answer = $this->pickRandomAnswerOfType($response, $type);$/;"	v
executor	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $this->executor = $executor;$/;"	v
executor	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    private $executor;$/;"	v
extractAddress	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    public function extractAddress(Message $response, $type)$/;"	f
filteredAnswers	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $filteredAnswers = array_filter($response->answers, function ($answer) use ($type) {$/;"	v
message	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^            $message = sprintf('DNS Request did not return valid answer. Received answers: %s', json_encode($response->answers));$/;"	v
nameserver	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $this->nameserver = $nameserver;$/;"	v
nameserver	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    private $nameserver;$/;"	v
pickRandomAnswerOfType	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    public function pickRandomAnswerOfType(Message $response, $type)$/;"	f
query	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $query = new Query($domain, Message::TYPE_A, Message::CLASS_IN, time());$/;"	v
resolve	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^    public function resolve($domain)$/;"	f
that	vendor/react/react/src/React/Dns/Resolver/Resolver.php	/^        $that = $this;$/;"	v
Factory	vendor/react/react/src/React/EventLoop/Factory.php	/^class Factory$/;"	c
create	vendor/react/react/src/React/EventLoop/Factory.php	/^    public static function create()$/;"	f
LibEvLoop	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^class LibEvLoop implements LoopInterface$/;"	c
__construct	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function __construct()$/;"	f
addPeriodicTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addReadStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private function addStream($stream, $listener, $flags)$/;"	f
addTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addWriteStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
cancelTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function cancelTimer(TimerInterface $timer)$/;"	f
dummyCallback	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $dummyCallback = function () {};$/;"	v
event	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $event = new \\libev\\IOEvent($listener, $stream, $flags);$/;"	v
interval	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $interval = $timer->getInterval();$/;"	v
isTimerActive	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function isTimerActive(TimerInterface $timer)$/;"	f
libevTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^            $libevTimer = new \\libev\\TimerEvent($dummyCallback, $interval);$/;"	v
libevTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^            $libevTimer = new \\libev\\TimerEvent($dummyCallback, $interval, $interval);$/;"	v
listener	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $listener = $this->wrapStreamListener($stream, $listener, $flags);$/;"	v
loop	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $this->loop = new \\libev\\EventLoop();$/;"	v
loop	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private $loop;$/;"	v
readEvents	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private $readEvents = array();$/;"	v
removeCallback	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^            $removeCallback = array($this, 'removeReadStream');$/;"	v
removeCallback	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^            $removeCallback = array($this, 'removeWriteStream');$/;"	v
removeReadStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function removeStream($stream)$/;"	f
removeWriteStream	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function removeWriteStream($stream)$/;"	f
run	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function run()$/;"	f
setupTimer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private function setupTimer(TimerInterface $timer)$/;"	f
stop	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function stop()$/;"	f
tick	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    public function tick()$/;"	f
timer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $timer = new Timer($this, $interval, $callback, false);$/;"	v
timer	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $timer = new Timer($this, $interval, $callback, true);$/;"	v
timers	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^        $this->timers = new SplObjectStorage();$/;"	v
timers	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private $timers;$/;"	v
wrapStreamListener	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private function wrapStreamListener($stream, $listener, $flags)$/;"	f
writeEvents	vendor/react/react/src/React/EventLoop/LibEvLoop.php	/^    private $writeEvents = array();$/;"	v
LibEventLoop	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^class LibEventLoop implements LoopInterface$/;"	c
__construct	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function __construct()$/;"	f
addPeriodicTimer	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addReadStream	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addStreamEvent	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    protected function addStreamEvent($stream, $eventClass, $type, $listener)$/;"	f
addTimer	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addTimerInternal	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    protected function addTimerInternal($interval, $callback, $periodic = false)$/;"	f
addWriteStream	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
base	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $this->base = event_base_new();$/;"	v
base	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $base;$/;"	v
callback	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $callback = function () use ($timers, $timer, &$callback) {$/;"	v
callback	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $this->callback = $this->createLibeventCallback();$/;"	v
callback	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $callback;$/;"	v
cancelTimer	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function cancelTimer(TimerInterface $timer)$/;"	f
createLibeventCallback	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    protected function createLibeventCallback()$/;"	f
event	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^            $event = $this->events[$id];$/;"	v
event	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^            $event = event_new();$/;"	v
events	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $events = array();$/;"	v
flags	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^            $flags = $this->flags[$id] & ~$eventClass;$/;"	v
flags	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $flags = isset($this->flags[$id]) ? $this->flags[$id] | $eventClass : $eventClass;$/;"	v
flags	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $flags = array();$/;"	v
id	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^            $id = (int) $stream;$/;"	v
id	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $id = (int) $stream;$/;"	v
isTimerActive	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function isTimerActive(TimerInterface $timer)$/;"	f
readCallbacks	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $readCallbacks = &$this->readCallbacks;$/;"	v
readCallbacks	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $readCallbacks = array();$/;"	v
removeReadStream	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeStream	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function removeStream($stream)$/;"	f
removeStreamEvent	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    protected function removeStreamEvent($stream, $eventClass, $type)$/;"	f
removeWriteStream	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function removeWriteStream($stream)$/;"	f
resource	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^            $resource = $this->timers[$timer];$/;"	v
resource	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $resource = event_new();$/;"	v
run	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function run()$/;"	f
stop	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function stop()$/;"	f
tick	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    public function tick()$/;"	f
timer	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $timer = new Timer($this, $interval, $callback, $periodic);$/;"	v
timers	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $this->timers = new SplObjectStorage();$/;"	v
timers	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $timers = $this->timers;$/;"	v
timers	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $timers;$/;"	v
writeCallbacks	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^        $writeCallbacks = &$this->writeCallbacks;$/;"	v
writeCallbacks	vendor/react/react/src/React/EventLoop/LibEventLoop.php	/^    private $writeCallbacks = array();$/;"	v
LoopInterface	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^interface LoopInterface$/;"	i
addPeriodicTimer	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function addPeriodicTimer($interval, $callback);$/;"	f
addReadStream	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function addReadStream($stream, $listener);$/;"	f
addTimer	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function addTimer($interval, $callback);$/;"	f
addWriteStream	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function addWriteStream($stream, $listener);$/;"	f
cancelTimer	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function cancelTimer(TimerInterface $timer);$/;"	f
isTimerActive	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function isTimerActive(TimerInterface $timer);$/;"	f
removeReadStream	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function removeReadStream($stream);$/;"	f
removeStream	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function removeStream($stream);$/;"	f
removeWriteStream	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function removeWriteStream($stream);$/;"	f
run	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function run();$/;"	f
stop	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function stop();$/;"	f
tick	vendor/react/react/src/React/EventLoop/LoopInterface.php	/^    public function tick();$/;"	f
StreamSelectLoop	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^class StreamSelectLoop implements LoopInterface$/;"	c
__construct	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function __construct()$/;"	f
addPeriodicTimer	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addReadStream	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addTimer	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addWriteStream	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
cancelTimer	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function cancelTimer(TimerInterface $timer)$/;"	f
currentTime	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $currentTime = microtime(true);$/;"	v
except	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $except = null;$/;"	v
getNextEventTimeInMicroSeconds	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    protected function getNextEventTimeInMicroSeconds()$/;"	f
id	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $id = (int) $stream;$/;"	v
isTimerActive	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function isTimerActive(TimerInterface $timer)$/;"	f
listener	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^                    $listener = $this->readListeners[(int) $stream];$/;"	v
listener	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^                    $listener = $this->writeListeners[(int) $stream];$/;"	v
nextEvent	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $nextEvent = $this->timers->getFirst();$/;"	v
read	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $read = $this->readStreams ?: null;$/;"	v
readListeners	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $readListeners = array();$/;"	v
readStreams	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $readStreams = array();$/;"	v
removeReadStream	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeStream	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function removeStream($stream)$/;"	f
removeWriteStream	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function removeWriteStream($stream)$/;"	f
run	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function run()$/;"	f
runStreamSelect	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    protected function runStreamSelect()$/;"	f
running	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^            $this->running = false;$/;"	v
running	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $this->running = false;$/;"	v
running	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $this->running = true;$/;"	v
running	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $running = false;$/;"	v
sleepOnPendingTimers	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    protected function sleepOnPendingTimers()$/;"	f
stop	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function stop()$/;"	f
tick	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    public function tick()$/;"	f
timer	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $timer = new Timer($this, $interval, $callback, false);$/;"	v
timer	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $timer = new Timer($this, $interval, $callback, true);$/;"	v
timers	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $this->timers = new Timers();$/;"	v
timers	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $timers;$/;"	v
write	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^        $write = $this->writeStreams ?: null;$/;"	v
writeListeners	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $writeListeners = array();$/;"	v
writeStreams	vendor/react/react/src/React/EventLoop/StreamSelectLoop.php	/^    private $writeStreams = array();$/;"	v
Timer	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^class Timer implements TimerInterface$/;"	c
__construct	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function __construct(LoopInterface $loop, $interval, $callback, $periodic = false, $data = null)$/;"	f
callback	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->callback = $callback;$/;"	v
callback	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    protected $callback;$/;"	v
cancel	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function cancel()$/;"	f
data	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->data = $data;$/;"	v
data	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->data = null;$/;"	v
data	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    protected $data;$/;"	v
getCallback	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function getCallback()$/;"	f
getData	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function getData()$/;"	f
getInterval	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function getInterval()$/;"	f
getLoop	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function getLoop()$/;"	f
interval	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->interval = (float) $interval;$/;"	v
interval	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    protected $interval;$/;"	v
isActive	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function isActive()$/;"	f
isPeriodic	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function isPeriodic()$/;"	f
loop	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    protected $loop;$/;"	v
periodic	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^        $this->periodic = (bool) $periodic;$/;"	v
periodic	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    protected $periodic;$/;"	v
setData	vendor/react/react/src/React/EventLoop/Timer/Timer.php	/^    public function setData($data)$/;"	f
TimerInterface	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^interface TimerInterface$/;"	i
cancel	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function cancel();$/;"	f
getCallback	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function getCallback();$/;"	f
getData	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function getData();$/;"	f
getInterval	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function getInterval();$/;"	f
getLoop	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function getLoop();$/;"	f
isActive	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function isActive();$/;"	f
isPeriodic	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function isPeriodic();$/;"	f
setData	vendor/react/react/src/React/EventLoop/Timer/TimerInterface.php	/^    public function setData($data);$/;"	f
Timers	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^class Timers$/;"	c
__construct	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function __construct()$/;"	f
add	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function add(TimerInterface $timer)$/;"	f
cancel	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function cancel(TimerInterface $timer)$/;"	f
contains	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function contains(TimerInterface $timer)$/;"	f
getFirst	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function getFirst()$/;"	f
getTime	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function getTime()$/;"	f
interval	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $interval = $timer->getInterval();$/;"	v
isEmpty	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function isEmpty()$/;"	f
scheduledAt	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $scheduledAt = $interval + $this->getTime();$/;"	v
scheduledAt	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $scheduledAt = $this->timers[$this->scheduler->top()];$/;"	v
scheduler	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $scheduler = $this->scheduler;$/;"	v
scheduler	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $this->scheduler = new SplPriorityQueue();$/;"	v
scheduler	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    private $scheduler;$/;"	v
tick	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function tick()$/;"	f
time	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $time = $this->updateTime();$/;"	v
time	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    private $time;$/;"	v
timer	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^            $timer = $scheduler->top();$/;"	v
timers	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $this->timers = new SplObjectStorage();$/;"	v
timers	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^        $timers = $this->timers;$/;"	v
timers	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    private $timers;$/;"	v
updateTime	vendor/react/react/src/React/EventLoop/Timer/Timers.php	/^    public function updateTime()$/;"	f
Request	vendor/react/react/src/React/Http/Request.php	/^class Request extends EventEmitter implements ReadableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/Http/Request.php	/^    public function __construct($method, $path, $query = array(), $httpVersion = '1.1', $headers = array())$/;"	f
close	vendor/react/react/src/React/Http/Request.php	/^    public function close()$/;"	f
expectsContinue	vendor/react/react/src/React/Http/Request.php	/^    public function expectsContinue()$/;"	f
getHeaders	vendor/react/react/src/React/Http/Request.php	/^    public function getHeaders()$/;"	f
getHttpVersion	vendor/react/react/src/React/Http/Request.php	/^    public function getHttpVersion()$/;"	f
getMethod	vendor/react/react/src/React/Http/Request.php	/^    public function getMethod()$/;"	f
getPath	vendor/react/react/src/React/Http/Request.php	/^    public function getPath()$/;"	f
getQuery	vendor/react/react/src/React/Http/Request.php	/^    public function getQuery()$/;"	f
headers	vendor/react/react/src/React/Http/Request.php	/^        $this->headers = $headers;$/;"	v
headers	vendor/react/react/src/React/Http/Request.php	/^    private $headers;$/;"	v
httpVersion	vendor/react/react/src/React/Http/Request.php	/^        $this->httpVersion = $httpVersion;$/;"	v
httpVersion	vendor/react/react/src/React/Http/Request.php	/^    private $httpVersion;$/;"	v
isReadable	vendor/react/react/src/React/Http/Request.php	/^    public function isReadable()$/;"	f
method	vendor/react/react/src/React/Http/Request.php	/^        $this->method = $method;$/;"	v
method	vendor/react/react/src/React/Http/Request.php	/^    private $method;$/;"	v
path	vendor/react/react/src/React/Http/Request.php	/^        $this->path = $path;$/;"	v
path	vendor/react/react/src/React/Http/Request.php	/^    private $path;$/;"	v
pause	vendor/react/react/src/React/Http/Request.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/src/React/Http/Request.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
query	vendor/react/react/src/React/Http/Request.php	/^        $this->query = $query;$/;"	v
query	vendor/react/react/src/React/Http/Request.php	/^    private $query;$/;"	v
readable	vendor/react/react/src/React/Http/Request.php	/^        $this->readable = false;$/;"	v
readable	vendor/react/react/src/React/Http/Request.php	/^    private $readable = true;$/;"	v
resume	vendor/react/react/src/React/Http/Request.php	/^    public function resume()$/;"	f
RequestHeaderParser	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^class RequestHeaderParser extends EventEmitter$/;"	c
buffer	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^    private $buffer = '';$/;"	v
feed	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^    public function feed($data)$/;"	f
maxSize	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^    private $maxSize = 4096;$/;"	v
parseRequest	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^    public function parseRequest($data)$/;"	f
parsed	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^        $parsed = $parser->parseRequest($headers."\\r\\n\\r\\n");$/;"	v
parsedQuery	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^        $parsedQuery = array();$/;"	v
parser	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^        $parser = new MessageParser();$/;"	v
request	vendor/react/react/src/React/Http/RequestHeaderParser.php	/^        $request = new Request($/;"	v
Response	vendor/react/react/src/React/Http/Response.php	/^class Response extends EventEmitter implements WritableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/Http/Response.php	/^    public function __construct(ConnectionInterface $conn)$/;"	f
chunk	vendor/react/react/src/React/Http/Response.php	/^            $chunk = dechex($len)."\\r\\n".$data."\\r\\n";$/;"	v
chunkedEncoding	vendor/react/react/src/React/Http/Response.php	/^            $this->chunkedEncoding = false;$/;"	v
chunkedEncoding	vendor/react/react/src/React/Http/Response.php	/^    private $chunkedEncoding = true;$/;"	v
close	vendor/react/react/src/React/Http/Response.php	/^    public function close()$/;"	f
closed	vendor/react/react/src/React/Http/Response.php	/^        $this->closed = true;$/;"	v
closed	vendor/react/react/src/React/Http/Response.php	/^    private $closed = false;$/;"	v
conn	vendor/react/react/src/React/Http/Response.php	/^        $this->conn = $conn;$/;"	v
conn	vendor/react/react/src/React/Http/Response.php	/^    private $conn;$/;"	v
data	vendor/react/react/src/React/Http/Response.php	/^        $data = "HTTP\/1.1 $status $text\\r\\n";$/;"	v
data	vendor/react/react/src/React/Http/Response.php	/^        $data = $this->formatHead($status, $headers);$/;"	v
end	vendor/react/react/src/React/Http/Response.php	/^    public function end($data = null)$/;"	f
flushed	vendor/react/react/src/React/Http/Response.php	/^            $flushed = $this->conn->write($chunk);$/;"	v
flushed	vendor/react/react/src/React/Http/Response.php	/^            $flushed = $this->conn->write($data);$/;"	v
formatHead	vendor/react/react/src/React/Http/Response.php	/^    private function formatHead($status, array $headers)$/;"	f
headWritten	vendor/react/react/src/React/Http/Response.php	/^        $this->headWritten = true;$/;"	v
headWritten	vendor/react/react/src/React/Http/Response.php	/^    private $headWritten = false;$/;"	v
headers	vendor/react/react/src/React/Http/Response.php	/^        $headers = array_merge($/;"	v
isWritable	vendor/react/react/src/React/Http/Response.php	/^    public function isWritable()$/;"	f
len	vendor/react/react/src/React/Http/Response.php	/^            $len = strlen($data);$/;"	v
name	vendor/react/react/src/React/Http/Response.php	/^            $name = str_replace(array("\\r", "\\n"), '', $name);$/;"	v
status	vendor/react/react/src/React/Http/Response.php	/^        $status = (int) $status;$/;"	v
text	vendor/react/react/src/React/Http/Response.php	/^        $text = isset(ResponseCodes::$statusTexts[$status]) ? ResponseCodes::$statusTexts[$status] : '';$/;"	v
that	vendor/react/react/src/React/Http/Response.php	/^        $that = $this;$/;"	v
value	vendor/react/react/src/React/Http/Response.php	/^            $value = str_replace(array("\\r", "\\n"), '', $value);$/;"	v
writable	vendor/react/react/src/React/Http/Response.php	/^        $this->writable = false;$/;"	v
writable	vendor/react/react/src/React/Http/Response.php	/^    private $writable = true;$/;"	v
write	vendor/react/react/src/React/Http/Response.php	/^    public function write($data)$/;"	f
writeContinue	vendor/react/react/src/React/Http/Response.php	/^    public function writeContinue()$/;"	f
writeHead	vendor/react/react/src/React/Http/Response.php	/^    public function writeHead($status = 200, array $headers = array())$/;"	f
ResponseCodes	vendor/react/react/src/React/Http/ResponseCodes.php	/^class ResponseCodes$/;"	c
statusTexts	vendor/react/react/src/React/Http/ResponseCodes.php	/^    public static $statusTexts = array($/;"	v
Server	vendor/react/react/src/React/Http/Server.php	/^class Server extends EventEmitter implements ServerInterface$/;"	c
__construct	vendor/react/react/src/React/Http/Server.php	/^    public function __construct(SocketServerInterface $io)$/;"	f
handleRequest	vendor/react/react/src/React/Http/Server.php	/^    public function handleRequest(ConnectionInterface $conn, Request $request, $bodyBuffer)$/;"	f
io	vendor/react/react/src/React/Http/Server.php	/^        $this->io = $io;$/;"	v
io	vendor/react/react/src/React/Http/Server.php	/^    private $io;$/;"	v
parser	vendor/react/react/src/React/Http/Server.php	/^            $parser = new RequestHeaderParser();$/;"	v
response	vendor/react/react/src/React/Http/Server.php	/^        $response = new Response($conn);$/;"	v
server	vendor/react/react/src/React/Http/Server.php	/^        $server = $this;$/;"	v
ServerInterface	vendor/react/react/src/React/Http/ServerInterface.php	/^interface ServerInterface extends EventEmitterInterface$/;"	i
Client	vendor/react/react/src/React/HttpClient/Client.php	/^class Client$/;"	c
__construct	vendor/react/react/src/React/HttpClient/Client.php	/^    public function __construct(LoopInterface $loop, ConnectorInterface $connector, ConnectorInterface $secureConnector)$/;"	f
connectionManager	vendor/react/react/src/React/HttpClient/Client.php	/^        $connectionManager = $this->getConnectorForScheme($requestData->getScheme());$/;"	v
connectionManager	vendor/react/react/src/React/HttpClient/Client.php	/^    private $connectionManager;$/;"	v
connector	vendor/react/react/src/React/HttpClient/Client.php	/^        $this->connector = $connector;$/;"	v
getConnectorForScheme	vendor/react/react/src/React/HttpClient/Client.php	/^    private function getConnectorForScheme($scheme)$/;"	f
loop	vendor/react/react/src/React/HttpClient/Client.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/HttpClient/Client.php	/^    private $loop;$/;"	v
request	vendor/react/react/src/React/HttpClient/Client.php	/^    public function request($method, $url, array $headers = array())$/;"	f
requestData	vendor/react/react/src/React/HttpClient/Client.php	/^        $requestData = new RequestData($method, $url, $headers);$/;"	v
secureConnectionManager	vendor/react/react/src/React/HttpClient/Client.php	/^    private $secureConnectionManager;$/;"	v
secureConnector	vendor/react/react/src/React/HttpClient/Client.php	/^        $this->secureConnector = $secureConnector;$/;"	v
Factory	vendor/react/react/src/React/HttpClient/Factory.php	/^class Factory$/;"	c
connector	vendor/react/react/src/React/HttpClient/Factory.php	/^        $connector = new Connector($loop, $resolver);$/;"	v
create	vendor/react/react/src/React/HttpClient/Factory.php	/^    public function create(LoopInterface $loop, Resolver $resolver)$/;"	f
secureConnector	vendor/react/react/src/React/HttpClient/Factory.php	/^        $secureConnector = new SecureConnector($connector, $loop);$/;"	v
Request	vendor/react/react/src/React/HttpClient/Request.php	/^class Request extends EventEmitter implements WritableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/HttpClient/Request.php	/^    public function __construct(LoopInterface $loop, ConnectorInterface $connector, RequestData $requestData)$/;"	f
buffer	vendor/react/react/src/React/HttpClient/Request.php	/^            $this->buffer = null;$/;"	v
buffer	vendor/react/react/src/React/HttpClient/Request.php	/^    private $buffer;$/;"	v
close	vendor/react/react/src/React/HttpClient/Request.php	/^    public function close(\\Exception $error = null)$/;"	f
closeError	vendor/react/react/src/React/HttpClient/Request.php	/^    public function closeError(\\Exception $error)$/;"	f
connect	vendor/react/react/src/React/HttpClient/Request.php	/^    protected function connect()$/;"	f
connector	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->connector = $connector;$/;"	v
connector	vendor/react/react/src/React/HttpClient/Request.php	/^    private $connector;$/;"	v
end	vendor/react/react/src/React/HttpClient/Request.php	/^    public function end($data = null)$/;"	f
factory	vendor/react/react/src/React/HttpClient/Request.php	/^            $factory = function ($protocol, $version, $code, $reasonPhrase, $headers) use ($loop, $stream) {$/;"	v
factory	vendor/react/react/src/React/HttpClient/Request.php	/^        $factory = $this->getResponseFactory();$/;"	v
getResponseFactory	vendor/react/react/src/React/HttpClient/Request.php	/^    public function getResponseFactory()$/;"	f
handleData	vendor/react/react/src/React/HttpClient/Request.php	/^    public function handleData($data)$/;"	f
handleDrain	vendor/react/react/src/React/HttpClient/Request.php	/^    public function handleDrain()$/;"	f
handleEnd	vendor/react/react/src/React/HttpClient/Request.php	/^    public function handleEnd()$/;"	f
handleError	vendor/react/react/src/React/HttpClient/Request.php	/^    public function handleError($error)$/;"	f
headers	vendor/react/react/src/React/HttpClient/Request.php	/^                    $headers = (string) $requestData;$/;"	v
host	vendor/react/react/src/React/HttpClient/Request.php	/^        $host = $this->requestData->getHost();$/;"	v
isWritable	vendor/react/react/src/React/HttpClient/Request.php	/^    public function isWritable()$/;"	f
loop	vendor/react/react/src/React/HttpClient/Request.php	/^            $loop = $this->loop;$/;"	v
loop	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/HttpClient/Request.php	/^    private $loop;$/;"	v
parseResponse	vendor/react/react/src/React/HttpClient/Request.php	/^    protected function parseResponse($data)$/;"	f
parsed	vendor/react/react/src/React/HttpClient/Request.php	/^        $parsed = $parser->parseResponse($data);$/;"	v
parser	vendor/react/react/src/React/HttpClient/Request.php	/^        $parser = new MessageParser();$/;"	v
port	vendor/react/react/src/React/HttpClient/Request.php	/^        $port = $this->requestData->getPort();$/;"	v
requestData	vendor/react/react/src/React/HttpClient/Request.php	/^        $requestData = $this->requestData;$/;"	v
requestData	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->requestData = $requestData;$/;"	v
requestData	vendor/react/react/src/React/HttpClient/Request.php	/^    private $requestData;$/;"	v
response	vendor/react/react/src/React/HttpClient/Request.php	/^            $this->response = $response;$/;"	v
response	vendor/react/react/src/React/HttpClient/Request.php	/^        $response = $factory($/;"	v
response	vendor/react/react/src/React/HttpClient/Request.php	/^    private $response;$/;"	v
responseFactory	vendor/react/react/src/React/HttpClient/Request.php	/^            $this->responseFactory = $factory;$/;"	v
responseFactory	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->responseFactory = $factory;$/;"	v
responseFactory	vendor/react/react/src/React/HttpClient/Request.php	/^    private $responseFactory;$/;"	v
setResponseFactory	vendor/react/react/src/React/HttpClient/Request.php	/^    public function setResponseFactory($factory)$/;"	f
state	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->state = self::STATE_END;$/;"	v
state	vendor/react/react/src/React/HttpClient/Request.php	/^        $this->state = self::STATE_WRITING_HEAD;$/;"	v
state	vendor/react/react/src/React/HttpClient/Request.php	/^    private $state = self::STATE_INIT;$/;"	v
stateRef	vendor/react/react/src/React/HttpClient/Request.php	/^                    $stateRef = Request::STATE_HEAD_WRITTEN;$/;"	v
stateRef	vendor/react/react/src/React/HttpClient/Request.php	/^        $stateRef = &$this->state;$/;"	v
stream	vendor/react/react/src/React/HttpClient/Request.php	/^            $stream = $this->stream;$/;"	v
stream	vendor/react/react/src/React/HttpClient/Request.php	/^    private $stream;$/;"	v
streamRef	vendor/react/react/src/React/HttpClient/Request.php	/^                    $streamRef = $stream;$/;"	v
streamRef	vendor/react/react/src/React/HttpClient/Request.php	/^        $streamRef = &$this->stream;$/;"	v
that	vendor/react/react/src/React/HttpClient/Request.php	/^            $that = $this;$/;"	v
that	vendor/react/react/src/React/HttpClient/Request.php	/^        $that = $this;$/;"	v
write	vendor/react/react/src/React/HttpClient/Request.php	/^    public function write($data)$/;"	f
writeHead	vendor/react/react/src/React/HttpClient/Request.php	/^    public function writeHead()$/;"	f
RequestData	vendor/react/react/src/React/HttpClient/RequestData.php	/^class RequestData$/;"	c
__construct	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function __construct($method, $url, array $headers = array())$/;"	f
__toString	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function __toString()$/;"	f
connectionHeaders	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $connectionHeaders = ('1.1' === $this->protocolVersion) ? array('Connection' => 'close') : array();$/;"	v
data	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $data = '';$/;"	v
getDefaultPort	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function getDefaultPort()$/;"	f
getHost	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function getHost()$/;"	f
getPath	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function getPath()$/;"	f
getPort	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function getPort()$/;"	f
getScheme	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function getScheme()$/;"	f
headers	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $headers = $this->mergeDefaultheaders($this->headers);$/;"	v
headers	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $this->headers = $headers;$/;"	v
headers	vendor/react/react/src/React/HttpClient/RequestData.php	/^    private $headers;$/;"	v
mergeDefaultheaders	vendor/react/react/src/React/HttpClient/RequestData.php	/^    private function mergeDefaultheaders(array $headers)$/;"	f
method	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $this->method = $method;$/;"	v
method	vendor/react/react/src/React/HttpClient/RequestData.php	/^    private $method;$/;"	v
path	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $path = parse_url($this->url, PHP_URL_PATH) ?: '\/';$/;"	v
port	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $port = ($this->getDefaultPort() === $this->getPort()) ? '' : ":{$this->getPort()}";$/;"	v
protocolVersion	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $this->protocolVersion = $version;$/;"	v
protocolVersion	vendor/react/react/src/React/HttpClient/RequestData.php	/^    private $protocolVersion = '1.1';$/;"	v
queryString	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $queryString = parse_url($this->url, PHP_URL_QUERY);$/;"	v
setProtocolVersion	vendor/react/react/src/React/HttpClient/RequestData.php	/^    public function setProtocolVersion($version)$/;"	f
url	vendor/react/react/src/React/HttpClient/RequestData.php	/^        $this->url = $url;$/;"	v
url	vendor/react/react/src/React/HttpClient/RequestData.php	/^    private $url;$/;"	v
Response	vendor/react/react/src/React/HttpClient/Response.php	/^class Response extends EventEmitter implements ReadableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/HttpClient/Response.php	/^    public function __construct(LoopInterface $loop, Stream $stream, $protocol, $version, $code, $reasonPhrase, $headers)$/;"	f
body	vendor/react/react/src/React/HttpClient/Response.php	/^    private $body;$/;"	v
close	vendor/react/react/src/React/HttpClient/Response.php	/^    public function close(\\Exception $error = null)$/;"	f
code	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->code = $code;$/;"	v
code	vendor/react/react/src/React/HttpClient/Response.php	/^    private $code;$/;"	v
getBody	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getBody()$/;"	f
getCode	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getCode()$/;"	f
getHeaders	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getHeaders()$/;"	f
getProtocol	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getProtocol()$/;"	f
getReasonPhrase	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getReasonPhrase()$/;"	f
getVersion	vendor/react/react/src/React/HttpClient/Response.php	/^    public function getVersion()$/;"	f
handleData	vendor/react/react/src/React/HttpClient/Response.php	/^    public function handleData($data)$/;"	f
handleEnd	vendor/react/react/src/React/HttpClient/Response.php	/^    public function handleEnd()$/;"	f
handleError	vendor/react/react/src/React/HttpClient/Response.php	/^    public function handleError(\\Exception $error)$/;"	f
headers	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->headers = $headers;$/;"	v
headers	vendor/react/react/src/React/HttpClient/Response.php	/^    private $headers;$/;"	v
isReadable	vendor/react/react/src/React/HttpClient/Response.php	/^    public function isReadable()$/;"	f
loop	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/HttpClient/Response.php	/^    private $loop;$/;"	v
pause	vendor/react/react/src/React/HttpClient/Response.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/src/React/HttpClient/Response.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
protocol	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->protocol = $protocol;$/;"	v
protocol	vendor/react/react/src/React/HttpClient/Response.php	/^    private $protocol;$/;"	v
readable	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->readable = false;$/;"	v
readable	vendor/react/react/src/React/HttpClient/Response.php	/^    private $readable = true;$/;"	v
reasonPhrase	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->reasonPhrase = $reasonPhrase;$/;"	v
reasonPhrase	vendor/react/react/src/React/HttpClient/Response.php	/^    private $reasonPhrase;$/;"	v
resume	vendor/react/react/src/React/HttpClient/Response.php	/^    public function resume()$/;"	f
stream	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->stream = $stream;$/;"	v
stream	vendor/react/react/src/React/HttpClient/Response.php	/^    private $stream;$/;"	v
version	vendor/react/react/src/React/HttpClient/Response.php	/^        $this->version = $version;$/;"	v
version	vendor/react/react/src/React/HttpClient/Response.php	/^    private $version;$/;"	v
Connection	vendor/react/react/src/React/Socket/Connection.php	/^class Connection extends Stream implements ConnectionInterface$/;"	c
data	vendor/react/react/src/React/Socket/Connection.php	/^        $data = stream_socket_recvfrom($stream, $this->bufferSize);$/;"	v
getRemoteAddress	vendor/react/react/src/React/Socket/Connection.php	/^    public function getRemoteAddress()$/;"	f
handleClose	vendor/react/react/src/React/Socket/Connection.php	/^    public function handleClose()$/;"	f
handleData	vendor/react/react/src/React/Socket/Connection.php	/^    public function handleData($stream)$/;"	f
parseAddress	vendor/react/react/src/React/Socket/Connection.php	/^    private function parseAddress($address)$/;"	f
ConnectionException	vendor/react/react/src/React/Socket/ConnectionException.php	/^class ConnectionException extends \\ErrorException$/;"	c
ConnectionInterface	vendor/react/react/src/React/Socket/ConnectionInterface.php	/^interface ConnectionInterface extends ReadableStreamInterface, WritableStreamInterface$/;"	i
getRemoteAddress	vendor/react/react/src/React/Socket/ConnectionInterface.php	/^    public function getRemoteAddress();$/;"	f
Server	vendor/react/react/src/React/Socket/Server.php	/^class Server extends EventEmitter implements ServerInterface$/;"	c
__construct	vendor/react/react/src/React/Socket/Server.php	/^    public function __construct(LoopInterface $loop)$/;"	f
client	vendor/react/react/src/React/Socket/Server.php	/^        $client = $this->createConnection($socket);$/;"	v
createConnection	vendor/react/react/src/React/Socket/Server.php	/^    public function createConnection($socket)$/;"	f
getPort	vendor/react/react/src/React/Socket/Server.php	/^    public function getPort()$/;"	f
handleConnection	vendor/react/react/src/React/Socket/Server.php	/^    public function handleConnection($socket)$/;"	f
host	vendor/react/react/src/React/Socket/Server.php	/^            $host = '[' . $host . ']';$/;"	v
listen	vendor/react/react/src/React/Socket/Server.php	/^    public function listen($port, $host = '127.0.0.1')$/;"	f
loop	vendor/react/react/src/React/Socket/Server.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/Socket/Server.php	/^    private $loop;$/;"	v
master	vendor/react/react/src/React/Socket/Server.php	/^        $this->master = @stream_socket_server("tcp:\/\/$host:$port", $errno, $errstr);$/;"	v
master	vendor/react/react/src/React/Socket/Server.php	/^    public $master;$/;"	v
message	vendor/react/react/src/React/Socket/Server.php	/^            $message = "Could not bind to tcp:\/\/$host:$port: $errstr";$/;"	v
name	vendor/react/react/src/React/Socket/Server.php	/^        $name = stream_socket_get_name($this->master, false);$/;"	v
newSocket	vendor/react/react/src/React/Socket/Server.php	/^            $newSocket = stream_socket_accept($master);$/;"	v
shutdown	vendor/react/react/src/React/Socket/Server.php	/^    public function shutdown()$/;"	f
that	vendor/react/react/src/React/Socket/Server.php	/^        $that = $this;$/;"	v
ServerInterface	vendor/react/react/src/React/Socket/ServerInterface.php	/^interface ServerInterface extends EventEmitterInterface$/;"	i
getPort	vendor/react/react/src/React/Socket/ServerInterface.php	/^    public function getPort();$/;"	f
listen	vendor/react/react/src/React/Socket/ServerInterface.php	/^    public function listen($port, $host = '127.0.0.1');$/;"	f
shutdown	vendor/react/react/src/React/Socket/ServerInterface.php	/^    public function shutdown();$/;"	f
ConnectionException	vendor/react/react/src/React/SocketClient/ConnectionException.php	/^class ConnectionException extends \\RuntimeException$/;"	c
Connector	vendor/react/react/src/React/SocketClient/Connector.php	/^class Connector implements ConnectorInterface$/;"	c
__construct	vendor/react/react/src/React/SocketClient/Connector.php	/^    public function __construct(LoopInterface $loop, Resolver $resolver)$/;"	f
checkConnectedSocket	vendor/react/react/src/React/SocketClient/Connector.php	/^    public function checkConnectedSocket($socket)$/;"	f
create	vendor/react/react/src/React/SocketClient/Connector.php	/^    public function create($host, $port)$/;"	f
createSocketForAddress	vendor/react/react/src/React/SocketClient/Connector.php	/^    public function createSocketForAddress($address, $port)$/;"	f
deferred	vendor/react/react/src/React/SocketClient/Connector.php	/^        $deferred = new Deferred();$/;"	v
getSocketUrl	vendor/react/react/src/React/SocketClient/Connector.php	/^    protected function getSocketUrl($host, $port)$/;"	f
handleConnectedSocket	vendor/react/react/src/React/SocketClient/Connector.php	/^    public function handleConnectedSocket($socket)$/;"	f
host	vendor/react/react/src/React/SocketClient/Connector.php	/^            $host = '[' . $host . ']';$/;"	v
loop	vendor/react/react/src/React/SocketClient/Connector.php	/^        $loop = $this->loop;$/;"	v
loop	vendor/react/react/src/React/SocketClient/Connector.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/SocketClient/Connector.php	/^    private $loop;$/;"	v
resolveHostname	vendor/react/react/src/React/SocketClient/Connector.php	/^    protected function resolveHostname($host)$/;"	f
resolver	vendor/react/react/src/React/SocketClient/Connector.php	/^        $this->resolver = $resolver;$/;"	v
resolver	vendor/react/react/src/React/SocketClient/Connector.php	/^    private $resolver;$/;"	v
socket	vendor/react/react/src/React/SocketClient/Connector.php	/^        $socket = stream_socket_client($url, $errno, $errstr, 0, STREAM_CLIENT_CONNECT | STREAM_CLIENT_ASYNC_CONNECT);$/;"	v
that	vendor/react/react/src/React/SocketClient/Connector.php	/^        $that = $this;$/;"	v
url	vendor/react/react/src/React/SocketClient/Connector.php	/^        $url = $this->getSocketUrl($address, $port);$/;"	v
waitForStreamOnce	vendor/react/react/src/React/SocketClient/Connector.php	/^    protected function waitForStreamOnce($stream)$/;"	f
ConnectorInterface	vendor/react/react/src/React/SocketClient/ConnectorInterface.php	/^interface ConnectorInterface$/;"	i
create	vendor/react/react/src/React/SocketClient/ConnectorInterface.php	/^    public function create($host, $port);$/;"	f
SecureConnector	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^class SecureConnector implements ConnectorInterface$/;"	c
__construct	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^    public function __construct(ConnectorInterface $connector, LoopInterface $loop)$/;"	f
connector	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^        $this->connector = $connector;$/;"	v
connector	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^    private $connector;$/;"	v
create	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^    public function create($host, $port)$/;"	f
streamEncryption	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^        $streamEncryption = $this->streamEncryption;$/;"	v
streamEncryption	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^        $this->streamEncryption = new StreamEncryption($loop);$/;"	v
streamEncryption	vendor/react/react/src/React/SocketClient/SecureConnector.php	/^    private $streamEncryption;$/;"	v
StreamEncryption	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^class StreamEncryption$/;"	c
__construct	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function __construct(LoopInterface $loop)$/;"	f
deferred	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $deferred = new Deferred();$/;"	v
disable	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function disable(Stream $stream)$/;"	f
enable	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function enable(Stream $stream)$/;"	f
errno	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $this->errno  = $errno;$/;"	v
errno	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    private $errno;$/;"	v
errstr	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $this->errstr = str_replace(array("\\r", "\\n"), ' ', $errstr);$/;"	v
errstr	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    private $errstr;$/;"	v
handleError	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function handleError($errno, $errstr)$/;"	f
loop	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    private $loop;$/;"	v
method	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    private $method = STREAM_CRYPTO_METHOD_TLS_CLIENT;$/;"	v
result	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $result = stream_socket_enable_crypto($socket, $toggle, $this->method);$/;"	v
socket	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $socket = $stream->stream;$/;"	v
that	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $that = $this;$/;"	v
toggle	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function toggle(Stream $stream, $toggle)$/;"	f
toggleCrypto	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^        $toggleCrypto = function () use ($that, $socket, $deferred, $toggle) {$/;"	v
toggleCrypto	vendor/react/react/src/React/SocketClient/StreamEncryption.php	/^    public function toggleCrypto($socket, ResolverInterface $resolver, $toggle)$/;"	f
Buffer	vendor/react/react/src/React/Stream/Buffer.php	/^class Buffer extends EventEmitter implements WritableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/Stream/Buffer.php	/^    public function __construct($stream, LoopInterface $loop)$/;"	f
belowSoftLimit	vendor/react/react/src/React/Stream/Buffer.php	/^        $belowSoftLimit = strlen($this->data) < $this->softLimit;$/;"	v
close	vendor/react/react/src/React/Stream/Buffer.php	/^    public function close()$/;"	f
data	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->data = '';$/;"	v
data	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->data = (string) substr($this->data, $sent);$/;"	v
data	vendor/react/react/src/React/Stream/Buffer.php	/^    private $data = '';$/;"	v
end	vendor/react/react/src/React/Stream/Buffer.php	/^    public function end($data = null)$/;"	f
errorHandler	vendor/react/react/src/React/Stream/Buffer.php	/^    private function errorHandler($errno, $errstr, $errfile, $errline)$/;"	f
handleWrite	vendor/react/react/src/React/Stream/Buffer.php	/^    public function handleWrite()$/;"	f
isWritable	vendor/react/react/src/React/Stream/Buffer.php	/^    public function isWritable()$/;"	f
lastError	vendor/react/react/src/React/Stream/Buffer.php	/^    private $lastError = array($/;"	v
len	vendor/react/react/src/React/Stream/Buffer.php	/^        $len = strlen($this->data);$/;"	v
listening	vendor/react/react/src/React/Stream/Buffer.php	/^            $this->listening = false;$/;"	v
listening	vendor/react/react/src/React/Stream/Buffer.php	/^            $this->listening = true;$/;"	v
listening	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->listening = false;$/;"	v
listening	vendor/react/react/src/React/Stream/Buffer.php	/^    public $listening = false;$/;"	v
loop	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/Stream/Buffer.php	/^    private $loop;$/;"	v
sent	vendor/react/react/src/React/Stream/Buffer.php	/^        $sent = fwrite($this->stream, $this->data);$/;"	v
softLimit	vendor/react/react/src/React/Stream/Buffer.php	/^    public $softLimit = 2048;$/;"	v
stream	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->stream = $stream;$/;"	v
stream	vendor/react/react/src/React/Stream/Buffer.php	/^    public $stream;$/;"	v
writable	vendor/react/react/src/React/Stream/Buffer.php	/^        $this->writable = false;$/;"	v
writable	vendor/react/react/src/React/Stream/Buffer.php	/^    private $writable = true;$/;"	v
write	vendor/react/react/src/React/Stream/Buffer.php	/^    public function write($data)$/;"	f
BufferedSink	vendor/react/react/src/React/Stream/BufferedSink.php	/^class BufferedSink extends WritableStream implements PromisorInterface$/;"	c
__construct	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function __construct()$/;"	f
buffer	vendor/react/react/src/React/Stream/BufferedSink.php	/^    private $buffer = '';$/;"	v
close	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function close()$/;"	f
createPromise	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public static function createPromise(ReadableStreamInterface $stream)$/;"	f
deferred	vendor/react/react/src/React/Stream/BufferedSink.php	/^        $this->deferred = new Deferred();$/;"	v
deferred	vendor/react/react/src/React/Stream/BufferedSink.php	/^    private $deferred;$/;"	v
handleErrorEvent	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function handleErrorEvent($e)$/;"	f
handlePipeEvent	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function handlePipeEvent($source)$/;"	f
promise	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function promise()$/;"	f
sink	vendor/react/react/src/React/Stream/BufferedSink.php	/^        $sink = new static();$/;"	v
write	vendor/react/react/src/React/Stream/BufferedSink.php	/^    public function write($data)$/;"	f
CompositeStream	vendor/react/react/src/React/Stream/CompositeStream.php	/^class CompositeStream extends EventEmitter implements ReadableStreamInterface, WritableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function __construct(ReadableStreamInterface $readable, WritableStreamInterface $writable)$/;"	f
close	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function close()$/;"	f
end	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function end($data = null)$/;"	f
handlePipeEvent	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function handlePipeEvent($source)$/;"	f
isReadable	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function isReadable()$/;"	f
isWritable	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function isWritable()$/;"	f
pause	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
pipeSource	vendor/react/react/src/React/Stream/CompositeStream.php	/^        $this->pipeSource = $source;$/;"	v
pipeSource	vendor/react/react/src/React/Stream/CompositeStream.php	/^        $this->pipeSource = null;$/;"	v
pipeSource	vendor/react/react/src/React/Stream/CompositeStream.php	/^    protected $pipeSource;$/;"	v
readable	vendor/react/react/src/React/Stream/CompositeStream.php	/^        $this->readable = $readable;$/;"	v
readable	vendor/react/react/src/React/Stream/CompositeStream.php	/^    protected $readable;$/;"	v
resume	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function resume()$/;"	f
writable	vendor/react/react/src/React/Stream/CompositeStream.php	/^        $this->writable = $writable;$/;"	v
writable	vendor/react/react/src/React/Stream/CompositeStream.php	/^    protected $writable;$/;"	v
write	vendor/react/react/src/React/Stream/CompositeStream.php	/^    public function write($data)$/;"	f
ReadableStream	vendor/react/react/src/React/Stream/ReadableStream.php	/^class ReadableStream extends EventEmitter implements ReadableStreamInterface$/;"	c
close	vendor/react/react/src/React/Stream/ReadableStream.php	/^    public function close()$/;"	f
closed	vendor/react/react/src/React/Stream/ReadableStream.php	/^        $this->closed = true;$/;"	v
closed	vendor/react/react/src/React/Stream/ReadableStream.php	/^    protected $closed = false;$/;"	v
isReadable	vendor/react/react/src/React/Stream/ReadableStream.php	/^    public function isReadable()$/;"	f
pause	vendor/react/react/src/React/Stream/ReadableStream.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/src/React/Stream/ReadableStream.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
resume	vendor/react/react/src/React/Stream/ReadableStream.php	/^    public function resume()$/;"	f
ReadableStreamInterface	vendor/react/react/src/React/Stream/ReadableStreamInterface.php	/^interface ReadableStreamInterface extends StreamInterface$/;"	i
isReadable	vendor/react/react/src/React/Stream/ReadableStreamInterface.php	/^    public function isReadable();$/;"	f
pause	vendor/react/react/src/React/Stream/ReadableStreamInterface.php	/^    public function pause();$/;"	f
pipe	vendor/react/react/src/React/Stream/ReadableStreamInterface.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array());$/;"	f
resume	vendor/react/react/src/React/Stream/ReadableStreamInterface.php	/^    public function resume();$/;"	f
Stream	vendor/react/react/src/React/Stream/Stream.php	/^class Stream extends EventEmitter implements ReadableStreamInterface, WritableStreamInterface$/;"	c
__construct	vendor/react/react/src/React/Stream/Stream.php	/^    public function __construct($stream, LoopInterface $loop)$/;"	f
buffer	vendor/react/react/src/React/Stream/Stream.php	/^        $this->buffer = new Buffer($this->stream, $this->loop);$/;"	v
buffer	vendor/react/react/src/React/Stream/Stream.php	/^    protected $buffer;$/;"	v
bufferSize	vendor/react/react/src/React/Stream/Stream.php	/^    public $bufferSize = 4096;$/;"	v
close	vendor/react/react/src/React/Stream/Stream.php	/^    public function close()$/;"	f
closing	vendor/react/react/src/React/Stream/Stream.php	/^        $this->closing = false;$/;"	v
closing	vendor/react/react/src/React/Stream/Stream.php	/^        $this->closing = true;$/;"	v
closing	vendor/react/react/src/React/Stream/Stream.php	/^    protected $closing = false;$/;"	v
data	vendor/react/react/src/React/Stream/Stream.php	/^        $data = fread($stream, $this->bufferSize);$/;"	v
end	vendor/react/react/src/React/Stream/Stream.php	/^    public function end($data = null)$/;"	f
getBuffer	vendor/react/react/src/React/Stream/Stream.php	/^    public function getBuffer()$/;"	f
handleClose	vendor/react/react/src/React/Stream/Stream.php	/^    public function handleClose()$/;"	f
handleData	vendor/react/react/src/React/Stream/Stream.php	/^    public function handleData($stream)$/;"	f
isReadable	vendor/react/react/src/React/Stream/Stream.php	/^    public function isReadable()$/;"	f
isWritable	vendor/react/react/src/React/Stream/Stream.php	/^    public function isWritable()$/;"	f
loop	vendor/react/react/src/React/Stream/Stream.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/react/src/React/Stream/Stream.php	/^    protected $loop;$/;"	v
pause	vendor/react/react/src/React/Stream/Stream.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/src/React/Stream/Stream.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
readable	vendor/react/react/src/React/Stream/Stream.php	/^        $this->readable = false;$/;"	v
readable	vendor/react/react/src/React/Stream/Stream.php	/^    protected $readable = true;$/;"	v
resume	vendor/react/react/src/React/Stream/Stream.php	/^    public function resume()$/;"	f
stream	vendor/react/react/src/React/Stream/Stream.php	/^        $this->stream = $stream;$/;"	v
stream	vendor/react/react/src/React/Stream/Stream.php	/^    public $stream;$/;"	v
that	vendor/react/react/src/React/Stream/Stream.php	/^        $that = $this;$/;"	v
writable	vendor/react/react/src/React/Stream/Stream.php	/^        $this->writable = false;$/;"	v
writable	vendor/react/react/src/React/Stream/Stream.php	/^    protected $writable = true;$/;"	v
write	vendor/react/react/src/React/Stream/Stream.php	/^    public function write($data)$/;"	f
StreamInterface	vendor/react/react/src/React/Stream/StreamInterface.php	/^interface StreamInterface extends EventEmitterInterface$/;"	i
close	vendor/react/react/src/React/Stream/StreamInterface.php	/^    public function close();$/;"	f
ThroughStream	vendor/react/react/src/React/Stream/ThroughStream.php	/^class ThroughStream extends CompositeStream$/;"	c
__construct	vendor/react/react/src/React/Stream/ThroughStream.php	/^    public function __construct()$/;"	f
end	vendor/react/react/src/React/Stream/ThroughStream.php	/^    public function end($data = null)$/;"	f
filter	vendor/react/react/src/React/Stream/ThroughStream.php	/^    public function filter($data)$/;"	f
readable	vendor/react/react/src/React/Stream/ThroughStream.php	/^        $readable = new ReadableStream();$/;"	v
writable	vendor/react/react/src/React/Stream/ThroughStream.php	/^        $writable = new WritableStream();$/;"	v
write	vendor/react/react/src/React/Stream/ThroughStream.php	/^    public function write($data)$/;"	f
Util	vendor/react/react/src/React/Stream/Util.php	/^class Util$/;"	c
end	vendor/react/react/src/React/Stream/Util.php	/^        $end = isset($options['end']) ? $options['end'] : true;$/;"	v
feedMore	vendor/react/react/src/React/Stream/Util.php	/^            $feedMore = $dest->write($data);$/;"	v
forwardEvents	vendor/react/react/src/React/Stream/Util.php	/^    public static function forwardEvents($source, $target, array $events)$/;"	f
pipe	vendor/react/react/src/React/Stream/Util.php	/^    public static function pipe(ReadableStreamInterface $source, WritableStreamInterface $dest, array $options = array())$/;"	f
WritableStream	vendor/react/react/src/React/Stream/WritableStream.php	/^class WritableStream extends EventEmitter implements WritableStreamInterface$/;"	c
close	vendor/react/react/src/React/Stream/WritableStream.php	/^    public function close()$/;"	f
closed	vendor/react/react/src/React/Stream/WritableStream.php	/^        $this->closed = true;$/;"	v
closed	vendor/react/react/src/React/Stream/WritableStream.php	/^    protected $closed = false;$/;"	v
end	vendor/react/react/src/React/Stream/WritableStream.php	/^    public function end($data = null)$/;"	f
isWritable	vendor/react/react/src/React/Stream/WritableStream.php	/^    public function isWritable()$/;"	f
write	vendor/react/react/src/React/Stream/WritableStream.php	/^    public function write($data)$/;"	f
WritableStreamInterface	vendor/react/react/src/React/Stream/WritableStreamInterface.php	/^interface WritableStreamInterface extends StreamInterface$/;"	i
end	vendor/react/react/src/React/Stream/WritableStreamInterface.php	/^    public function end($data = null);$/;"	f
isWritable	vendor/react/react/src/React/Stream/WritableStreamInterface.php	/^    public function isWritable();$/;"	f
write	vendor/react/react/src/React/Stream/WritableStreamInterface.php	/^    public function write($data);$/;"	f
ArrayCacheTest	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^class ArrayCacheTest extends TestCase$/;"	c
cache	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^        $this->cache = new ArrayCache();$/;"	v
cache	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^    private $cache;$/;"	v
getShouldRejectPromiseForNonExistentKey	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^    public function getShouldRejectPromiseForNonExistentKey()$/;"	f
removeShouldRemoveKey	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^    public function removeShouldRemoveKey()$/;"	f
setShouldSetKey	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^    public function setShouldSetKey()$/;"	f
setUp	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^    public function setUp()$/;"	f
success	vendor/react/react/tests/React/Tests/Cache/ArrayCacheTest.php	/^        $success = $this->createCallableMock();$/;"	v
FilesystemFactoryTest	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^class FilesystemFactoryTest extends \\PHPUnit_Framework_TestCase$/;"	c
capturedConfig	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^            $capturedConfig = $config;$/;"	v
capturedConfig	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $capturedConfig = null;$/;"	v
contents	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $contents = '#$/;"	v
createShouldLoadStuffFromFilesystem	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^    public function createShouldLoadStuffFromFilesystem()$/;"	f
expected	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $expected = array('127.0.0.1', '8.8.8.8');$/;"	v
expected	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $expected = array('8.8.8.8');$/;"	v
factory	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $factory = new FilesystemFactory($loop);$/;"	v
loop	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $loop = $this->getMock('React\\EventLoop\\LoopInterface');$/;"	v
parseEtcResolvConfShouldParseCorrectly	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^    public function parseEtcResolvConfShouldParseCorrectly()$/;"	f
triggerListener	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^                $triggerListener = function () use ($stream, $listener) {$/;"	v
triggerListener	vendor/react/react/tests/React/Tests/Dns/Config/FilesystemFactoryTest.php	/^        $triggerListener = null;$/;"	v
BinaryDumperTest	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^class BinaryDumperTest extends \\PHPUnit_Framework_TestCase$/;"	c
convertBinaryToHexDump	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^    private function convertBinaryToHexDump($input)$/;"	f
data	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $data = "";$/;"	v
data	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $data = $dumper->toBinary($request);$/;"	v
data	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $data = $this->convertBinaryToHexDump($data);$/;"	v
dumper	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $dumper = new BinaryDumper();$/;"	v
expected	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $expected = $this->formatHexDump(str_replace(' ', '', $data), 2);$/;"	v
formatHexDump	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^    private function formatHexDump($input)$/;"	f
request	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^        $request = new Message();$/;"	v
testRequestToBinary	vendor/react/react/tests/React/Tests/Dns/Protocol/BinaryDumperTest.php	/^    public function testRequestToBinary()$/;"	f
ParserTest	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^class ParserTest extends \\PHPUnit_Framework_TestCase$/;"	c
convertTcpDumpToBinary	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    private function convertTcpDumpToBinary($input)$/;"	f
data	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $data = "";$/;"	v
data	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $data = $this->convertTcpDumpToBinary($data);$/;"	v
header	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $header = $request->header;$/;"	v
header	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $header = $response->header;$/;"	v
parser	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $parser = new Parser();$/;"	v
provideConvertTcpDumpToBinary	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function provideConvertTcpDumpToBinary()$/;"	f
request	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $request = new Message();$/;"	v
response	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^        $response = new Message();$/;"	v
testConvertTcpDumpToBinary	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testConvertTcpDumpToBinary($expected, $data)$/;"	f
testParseAnswerWithInlineData	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseAnswerWithInlineData()$/;"	f
testParseQuestionWithTwoQuestions	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseQuestionWithTwoQuestions()$/;"	f
testParseRequest	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseRequest()$/;"	f
testParseResponse	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseResponse()$/;"	f
testParseResponseWithCnameAndOffsetPointers	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseResponseWithCnameAndOffsetPointers()$/;"	f
testParseResponseWithTwoAnswers	vendor/react/react/tests/React/Tests/Dns/Protocol/ParserTest.php	/^    public function testParseResponseWithTwoAnswers()$/;"	f
CachedExecutorTest	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^class CachedExecutorTest extends \\PHPUnit_Framework_TestCase$/;"	c
cache	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $cache = $this->getMockBuilder('React\\Dns\\Query\\RecordCache')$/;"	v
cachedExecutor	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $cachedExecutor = new CachedExecutor($executor, $cache);$/;"	v
cachedRecords	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $cachedRecords = array(new Record('igor.io', Message::TYPE_A, Message::CLASS_IN));$/;"	v
callQueryCallbackWithAddress	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    private function callQueryCallbackWithAddress($address)$/;"	f
callingQueryTwiceShouldUseCachedResult	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    public function callingQueryTwiceShouldUseCachedResult()$/;"	f
createCallableMock	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    protected function createCallableMock()$/;"	f
createExecutorMock	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    private function createExecutorMock()$/;"	f
createPromiseMock	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    private function createPromiseMock()$/;"	f
executor	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $executor = $this->createExecutorMock();$/;"	v
expectCallableOnce	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    protected function expectCallableOnce()$/;"	f
mock	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $mock = $this->createCallableMock();$/;"	v
query	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^        $query = new Query('igor.io', Message::TYPE_A, Message::CLASS_IN, 1345656451);$/;"	v
queryShouldDelegateToDecoratedExecutor	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^    public function queryShouldDelegateToDecoratedExecutor()$/;"	f
response	vendor/react/react/tests/React/Tests/Dns/Query/CachedExecutorTest.php	/^            $response = new Message();$/;"	v
ExecutorTest	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^class ExecutorTest extends \\PHPUnit_Framework_TestCase$/;"	c
callback	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $callback = $this->expectCallableNever();$/;"	v
callback	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $callback = function ($data, $response) use ($that) {$/;"	v
callback	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $callback = function () use ($conn) {$/;"	v
conn	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $conn = $this->createConnectionMock();$/;"	v
conn	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $conn = $this->getMock('React\\Socket\\ConnectionInterface');$/;"	v
convertMessageToStandardResponse	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function convertMessageToStandardResponse(Message $response)$/;"	f
convertMessageToTruncatedResponse	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function convertMessageToTruncatedResponse(Message $response)$/;"	f
createCallableMock	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    protected function createCallableMock()$/;"	f
createConnectionMock	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    private function createConnectionMock()$/;"	f
createExecutorMock	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    private function createExecutorMock()$/;"	f
dumper	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $this->dumper = new BinaryDumper();$/;"	v
errorback	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $errorback = $this->createCallableMock();$/;"	v
executor	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $this->executor = $this->createExecutorMock();$/;"	v
executor	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $this->executor = new Executor($this->loop, $this->parser, $this->dumper);$/;"	v
expectCallableNever	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    protected function expectCallableNever()$/;"	f
loop	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $this->loop = $this->getMock('React\\EventLoop\\LoopInterface');$/;"	v
mock	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $mock = $this->createCallableMock();$/;"	v
parser	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $this->parser = $this->getMock('React\\Dns\\Protocol\\Parser');$/;"	v
prepareRequestShouldCreateRequestWithRecursionDesired	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function prepareRequestShouldCreateRequestWithRecursionDesired()$/;"	f
query	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $query = new Query('igor.io', Message::TYPE_A, Message::CLASS_IN, 1345656451);$/;"	v
query	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $query = new Query(str_repeat('a', 512).'.igor.io', Message::TYPE_A, Message::CLASS_IN, 1345656451);$/;"	v
queryShouldCreateUdpRequest	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function queryShouldCreateUdpRequest()$/;"	f
request	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $request = $this->executor->prepareRequest($query);$/;"	v
resolveShouldCancelTimerWhenFullResponseIsReceived	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function resolveShouldCancelTimerWhenFullResponseIsReceived()$/;"	f
resolveShouldCloseConnectionOnTimeout	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function resolveShouldCloseConnectionOnTimeout()$/;"	f
resolveShouldCreateTcpRequestIfRequestIsLargerThan512Bytes	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function resolveShouldCreateTcpRequestIfRequestIsLargerThan512Bytes()$/;"	f
resolveShouldFailIfResponseIsTruncatedAfterTcpRequest	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function resolveShouldFailIfResponseIsTruncatedAfterTcpRequest()$/;"	f
resolveShouldRetryWithTcpIfResponseIsTruncated	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function resolveShouldRetryWithTcpIfResponseIsTruncated()$/;"	f
returnNewConnectionMock	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    private function returnNewConnectionMock()$/;"	f
returnStandardResponse	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    private function returnStandardResponse()$/;"	f
returnTruncatedResponse	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    private function returnTruncatedResponse()$/;"	f
self	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $self = $this;$/;"	v
setUp	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^    public function setUp()$/;"	f
that	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $that = $this;$/;"	v
timer	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^        $timer = $this->getMock('React\\EventLoop\\Timer\\TimerInterface');$/;"	v
timerCallback	vendor/react/react/tests/React/Tests/Dns/Query/ExecutorTest.php	/^                $timerCallback = $callback;$/;"	v
RecordBagTest	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^class RecordBagTest extends \\PHPUnit_Framework_TestCase$/;"	c
currentTime	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^        $currentTime = 1345656451;$/;"	v
emptyBagShouldBeEmpty	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^    public function emptyBagShouldBeEmpty()$/;"	f
recordBag	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^        $recordBag = new RecordBag();$/;"	v
records	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^        $records = $recordBag->all();$/;"	v
setShouldSetManyValues	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^    public function setShouldSetManyValues()$/;"	f
setShouldSetTheValue	vendor/react/react/tests/React/Tests/Dns/Query/RecordBagTest.php	/^    public function setShouldSetTheValue()$/;"	f
RecordCacheTest	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^class RecordCacheTest extends \\PHPUnit_Framework_TestCase$/;"	c
cache	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $cache = new RecordCache(new ArrayCache());$/;"	v
cachedRecords	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $cachedRecords = $this->getPromiseValue($promise);$/;"	v
cachedTime	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $cachedTime = 1345656451;$/;"	v
capturedValue	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^            $capturedValue = $value;$/;"	v
capturedValue	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $capturedValue = null;$/;"	v
currentTime	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $currentTime = $cachedTime + 3605;$/;"	v
expireShouldExpireDeadRecords	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    public function expireShouldExpireDeadRecords()$/;"	f
getPromiseValue	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    private function getPromiseValue(PromiseInterface $promise)$/;"	f
lookupOnEmptyCacheShouldReturnNull	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    public function lookupOnEmptyCacheShouldReturnNull()$/;"	f
promise	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $promise = $cache->lookup($query);$/;"	v
query	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $query = new Query('igor.io', Message::TYPE_A, Message::CLASS_IN, $currentTime);$/;"	v
query	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $query = new Query('igor.io', Message::TYPE_A, Message::CLASS_IN, 1345656451);$/;"	v
response	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^        $response = new Message();$/;"	v
storeRecordShouldMakeLookupSucceed	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    public function storeRecordShouldMakeLookupSucceed()$/;"	f
storeResponseMessageShouldStoreAllAnswerValues	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    public function storeResponseMessageShouldStoreAllAnswerValues()$/;"	f
storeTwoRecordsShouldReturnBoth	vendor/react/react/tests/React/Tests/Dns/Query/RecordCacheTest.php	/^    public function storeTwoRecordsShouldReturnBoth()$/;"	f
RetryExecutorTest	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^class RetryExecutorTest extends \\PHPUnit_Framework_TestCase$/;"	c
callback	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $callback = $this->createCallableMock();$/;"	v
callback	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $callback = $this->expectCallableNever();$/;"	v
createCallableMock	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function createCallableMock()$/;"	f
createExecutorMock	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function createExecutorMock()$/;"	f
createPromiseMock	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function createPromiseMock()$/;"	f
createStandardResponse	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function createStandardResponse()$/;"	f
errorback	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $errorback = $this->createCallableMock();$/;"	v
errorback	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $errorback = $this->expectCallableNever();$/;"	v
executor	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $executor = $this->createExecutorMock();$/;"	v
expectCallableNever	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function expectCallableNever()$/;"	f
expectCallableOnce	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function expectCallableOnce()$/;"	f
expectPromiseOnce	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    protected function expectPromiseOnce($return = null)$/;"	f
mock	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $mock = $this->createCallableMock();$/;"	v
mock	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $mock = $this->createPromiseMock();$/;"	v
query	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $query = new Query('igor.io', Message::TYPE_A, Message::CLASS_IN, 1345656451);$/;"	v
queryShouldDelegateToDecoratedExecutor	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    public function queryShouldDelegateToDecoratedExecutor()$/;"	f
queryShouldForwardNonTimeoutErrors	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    public function queryShouldForwardNonTimeoutErrors()$/;"	f
queryShouldRetryQueryOnTimeout	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    public function queryShouldRetryQueryOnTimeout()$/;"	f
queryShouldStopRetryingAfterSomeAttempts	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^    public function queryShouldStopRetryingAfterSomeAttempts()$/;"	f
response	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $response = $this->createStandardResponse();$/;"	v
response	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $response = new Message;$/;"	v
retryExecutor	vendor/react/react/tests/React/Tests/Dns/Query/RetryExecutorTest.php	/^        $retryExecutor = new RetryExecutor($executor, 2);$/;"	v
FactoryTest	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^class FactoryTest extends \\PHPUnit_Framework_TestCase$/;"	c
createCachedShouldCreateResolverWithCachedExecutor	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    public function createCachedShouldCreateResolverWithCachedExecutor()$/;"	f
createShouldCreateResolver	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    public function createShouldCreateResolver()$/;"	f
createWithoutPortShouldCreateResolverWithDefaultPort	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    public function createWithoutPortShouldCreateResolverWithDefaultPort()$/;"	f
factory	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $factory = new Factory();$/;"	v
factoryShouldAddDefaultPort	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    public function factoryShouldAddDefaultPort($input, $expected)$/;"	f
factoryShouldAddDefaultPortProvider	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    public static function factoryShouldAddDefaultPortProvider()$/;"	f
getResolverPrivateMemberValue	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^    private function getResolverPrivateMemberValue($resolver, $field)$/;"	f
loop	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $loop = $this->getMock('React\\EventLoop\\LoopInterface');$/;"	v
reflector	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $reflector = new \\ReflectionProperty('React\\Dns\\Resolver\\Resolver', $field);$/;"	v
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $resolver = $factory->create($input, $loop);$/;"	v
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $resolver = $factory->create('8.8.8.8', $loop);$/;"	v
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $resolver = $factory->create('8.8.8.8:53', $loop);$/;"	v
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/FactoryTest.php	/^        $resolver = $factory->createCached('8.8.8.8:53', $loop);$/;"	v
PickRandomAnswerOfTypeTest	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^class PickRandomAnswerOfTypeTest extends \\PHPUnit_Framework_TestCase$/;"	c
answer	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^            $answer = $resolver->pickRandomAnswerOfType($message, $type);$/;"	v
createExecutorMock	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^    private function createExecutorMock()$/;"	f
createMessage	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^    private function createMessage(array $headerOptions, $questions, $answers = array())$/;"	f
executor	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^        $executor = $this->createExecutorMock();$/;"	v
expectedAnswer	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^            $expectedAnswer = $message->answers[$index];$/;"	v
message	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^        $message = new Message();$/;"	v
providePickRandomAnswerOfType	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^    public function providePickRandomAnswerOfType()$/;"	f
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^        $resolver = new Resolver('8.8.8.8:53', $executor);$/;"	v
success	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^            $success = $this->tryToMatchPickRandomAnswerOfType($resolver, $expectedAnswer, $message, $type);$/;"	v
testPickRandomAnswerOfType	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^    public function testPickRandomAnswerOfType($expectedAnswerIndexes, Message $message, $type)$/;"	f
tryToMatchPickRandomAnswerOfType	vendor/react/react/tests/React/Tests/Dns/Resolver/PickRandomAnswerOfTypeTest.php	/^    private function tryToMatchPickRandomAnswerOfType(Resolver $resolver, Record $expectedAnswer, Message $message, $type)$/;"	f
ResolverTest	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^class ResolverTest extends \\PHPUnit_Framework_TestCase$/;"	c
createCallableMock	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    protected function createCallableMock()$/;"	f
createExecutorMock	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    private function createExecutorMock()$/;"	f
errback	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^        $errback = $this->expectCallableOnceWith($this->isInstanceOf('React\\Dns\\RecordNotFoundException'));$/;"	v
executor	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^        $executor = $this->createExecutorMock();$/;"	v
expectCallableNever	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    protected function expectCallableNever()$/;"	f
expectCallableOnce	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    protected function expectCallableOnce()$/;"	f
expectCallableOnceWith	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    protected function expectCallableOnceWith($with)$/;"	f
mock	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^        $mock = $this->createCallableMock();$/;"	v
resolveShouldQueryARecords	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    public function resolveShouldQueryARecords()$/;"	f
resolveSouldProvideDefaultErrorbackToExecutor	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    public function resolveSouldProvideDefaultErrorbackToExecutor()$/;"	f
resolveWithNoAnswersShouldCallErrbackIfGiven	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    public function resolveWithNoAnswersShouldCallErrbackIfGiven()$/;"	f
resolveWithNoAnswersShouldThrowException	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^    public function resolveWithNoAnswersShouldThrowException()$/;"	f
resolver	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^        $resolver = new Resolver('8.8.8.8:53', $executor);$/;"	v
response	vendor/react/react/tests/React/Tests/Dns/Resolver/ResolverTest.php	/^                $response = new Message();$/;"	v
AbstractLoopTest	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^abstract class AbstractLoopTest extends TestCase$/;"	c
assertRunFasterThan	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    private function assertRunFasterThan($maxInterval)$/;"	f
emptyRunShouldSimplyReturn	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function emptyRunShouldSimplyReturn()$/;"	f
end	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $end = microtime(true);$/;"	v
input	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $input = fopen('php:\/\/temp', 'r+');$/;"	v
interval	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $interval = $end - $start;$/;"	v
loop	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $loop = $this->loop;$/;"	v
loop	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $this->loop = $this->createLoop();$/;"	v
loop	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    protected $loop;$/;"	v
runShouldReturnWhenNoMoreFds	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function runShouldReturnWhenNoMoreFds()$/;"	f
setUp	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function setUp()$/;"	f
start	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^        $start = microtime(true);$/;"	v
stopShouldStopRunningLoop	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function stopShouldStopRunningLoop()$/;"	f
testAddReadStream	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testAddReadStream()$/;"	f
testAddWriteStream	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testAddWriteStream()$/;"	f
testRemoveReadStreamAfterReading	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveReadStreamAfterReading()$/;"	f
testRemoveReadStreamInstantly	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveReadStreamInstantly()$/;"	f
testRemoveStream	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveStream()$/;"	f
testRemoveStreamInstantly	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveStreamInstantly()$/;"	f
testRemoveWriteStreamAfterWriting	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveWriteStreamAfterWriting()$/;"	f
testRemoveWriteStreamInstantly	vendor/react/react/tests/React/Tests/EventLoop/AbstractLoopTest.php	/^    public function testRemoveWriteStreamInstantly()$/;"	f
LibEvLoopTest	vendor/react/react/tests/React/Tests/EventLoop/LibEvLoopTest.php	/^class LibEvLoopTest extends AbstractLoopTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/LibEvLoopTest.php	/^    public function createLoop()$/;"	f
loop	vendor/react/react/tests/React/Tests/EventLoop/LibEvLoopTest.php	/^        $loop = new LibEvLoop();$/;"	v
testLibEvConstructor	vendor/react/react/tests/React/Tests/EventLoop/LibEvLoopTest.php	/^    public function testLibEvConstructor()$/;"	f
LibEventLoopTest	vendor/react/react/tests/React/Tests/EventLoop/LibEventLoopTest.php	/^class LibEventLoopTest extends AbstractLoopTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/LibEventLoopTest.php	/^    public function createLoop()$/;"	f
loop	vendor/react/react/tests/React/Tests/EventLoop/LibEventLoopTest.php	/^        $loop = new LibEventLoop();$/;"	v
testLibEventConstructor	vendor/react/react/tests/React/Tests/EventLoop/LibEventLoopTest.php	/^    public function testLibEventConstructor()$/;"	f
StreamSelectLoopTest	vendor/react/react/tests/React/Tests/EventLoop/StreamSelectLoopTest.php	/^class StreamSelectLoopTest extends AbstractLoopTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/StreamSelectLoopTest.php	/^    public function createLoop()$/;"	f
loop	vendor/react/react/tests/React/Tests/EventLoop/StreamSelectLoopTest.php	/^        $loop = new StreamSelectLoop();$/;"	v
testStreamSelectConstructor	vendor/react/react/tests/React/Tests/EventLoop/StreamSelectLoopTest.php	/^    public function testStreamSelectConstructor()$/;"	f
AbstractTimerTest	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^abstract class AbstractTimerTest extends TestCase$/;"	c
i	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^        $i = 0;$/;"	v
loop	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^        $loop = $this->createLoop();$/;"	v
testAddPeriodicTimer	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^    public function testAddPeriodicTimer()$/;"	f
testAddPeriodicTimerCancelsItself	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^    public function testAddPeriodicTimerCancelsItself()$/;"	f
testAddPeriodicTimerWithCancel	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^    public function testAddPeriodicTimerWithCancel()$/;"	f
testAddTimer	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^    public function testAddTimer()$/;"	f
timer	vendor/react/react/tests/React/Tests/EventLoop/Timer/AbstractTimerTest.php	/^        $timer = $loop->addPeriodicTimer(0.001, $this->expectCallableExactly(2));$/;"	v
LibEvTimerTest	vendor/react/react/tests/React/Tests/EventLoop/Timer/LibEvTimerTest.php	/^class LibEvTimerTest extends AbstractTimerTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/Timer/LibEvTimerTest.php	/^    public function createLoop()$/;"	f
LibEventTimerTest	vendor/react/react/tests/React/Tests/EventLoop/Timer/LibEventTimerTest.php	/^class LibEventTimerTest extends AbstractTimerTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/Timer/LibEventTimerTest.php	/^    public function createLoop()$/;"	f
StreamSelectTimerTest	vendor/react/react/tests/React/Tests/EventLoop/Timer/StreamSelectTimerTest.php	/^class StreamSelectTimerTest extends AbstractTimerTest$/;"	c
createLoop	vendor/react/react/tests/React/Tests/EventLoop/Timer/StreamSelectTimerTest.php	/^    public function createLoop()$/;"	f
RequestHeaderParserTest	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^class RequestHeaderParserTest extends TestCase$/;"	c
bodyBuffer	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^            $bodyBuffer = $parsedBodyBuffer;$/;"	v
bodyBuffer	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $bodyBuffer = null;$/;"	v
createAdvancedPostRequest	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    private function createAdvancedPostRequest()$/;"	f
createGetRequest	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    private function createGetRequest()$/;"	f
data	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $data = "GET \/ HTTP\/1.1\\r\\n";$/;"	v
data	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $data = "POST \/foo?bar=baz HTTP\/1.1\\r\\n";$/;"	v
data	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $data = $this->createAdvancedPostRequest();$/;"	v
data	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $data = $this->createGetRequest();$/;"	v
data	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $data = str_repeat('A', 4097);$/;"	v
error	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^            $error = $message;$/;"	v
error	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $error = null;$/;"	v
headers	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $headers = array($/;"	v
parser	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $parser = new RequestHeaderParser();$/;"	v
request	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^            $request = $parsedRequest;$/;"	v
request	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^        $request = null;$/;"	v
testFeedInOneGo	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testFeedInOneGo()$/;"	f
testHeaderOverflowShouldEmitError	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testHeaderOverflowShouldEmitError()$/;"	f
testHeadersEventShouldParsePathAndQueryString	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testHeadersEventShouldParsePathAndQueryString()$/;"	f
testHeadersEventShouldReturnBinaryBodyBuffer	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testHeadersEventShouldReturnBinaryBodyBuffer()$/;"	f
testHeadersEventShouldReturnRequestAndBodyBuffer	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testHeadersEventShouldReturnRequestAndBodyBuffer()$/;"	f
testSplitShouldHappenOnDoubleCrlf	vendor/react/react/tests/React/Tests/Http/RequestHeaderParserTest.php	/^    public function testSplitShouldHappenOnDoubleCrlf()$/;"	f
RequestTest	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^class RequestTest extends TestCase$/;"	c
expectsContinueShouldBeFalseByDefault	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^    public function expectsContinueShouldBeFalseByDefault()$/;"	f
expectsContinueShouldBeTrueIfContinueExpected	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^    public function expectsContinueShouldBeTrueIfContinueExpected()$/;"	f
headers	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^        $headers = array('Expect' => '100-continue');$/;"	v
headers	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^        $headers = array();$/;"	v
request	vendor/react/react/tests/React/Tests/Http/RequestTest.php	/^        $request = new Request('GET', '\/', array(), '1.1', $headers);$/;"	v
ResponseTest	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^class ResponseTest extends TestCase$/;"	c
conn	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^        $conn = $this->getMock('React\\Socket\\ConnectionInterface');$/;"	v
ended	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^            $ended = true;$/;"	v
ended	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^        $ended = false;$/;"	v
expected	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^        $expected = '';$/;"	v
missingStatusCodeTextShouldResultInNumberOnlyStatus	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function missingStatusCodeTextShouldResultInNumberOnlyStatus()$/;"	f
response	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^        $response = new Response($conn);$/;"	v
shouldForwardEndDrainAndErrorEvents	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function shouldForwardEndDrainAndErrorEvents()$/;"	f
shouldRemoveNewlinesFromHeaders	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function shouldRemoveNewlinesFromHeaders()$/;"	f
testResponseBodyShouldBeChunkedCorrectly	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function testResponseBodyShouldBeChunkedCorrectly()$/;"	f
testResponseShouldBeChunkedByDefault	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function testResponseShouldBeChunkedByDefault()$/;"	f
testResponseShouldEmitEndOnStreamEnd	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function testResponseShouldEmitEndOnStreamEnd()$/;"	f
testResponseShouldNotBeChunkedWithContentLength	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function testResponseShouldNotBeChunkedWithContentLength()$/;"	f
writeContinueShouldSendContinueLineBeforeRealHeaders	vendor/react/react/tests/React/Tests/Http/ResponseTest.php	/^    public function writeContinueShouldSendContinueLineBeforeRealHeaders()$/;"	f
ServerTest	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^class ServerTest extends TestCase$/;"	c
conn	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $conn = new ConnectionStub();$/;"	v
createGetRequest	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^    private function createGetRequest()$/;"	f
data	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $data = "GET \/ HTTP\/1.1\\r\\n";$/;"	v
data	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $data = $this->createGetRequest();$/;"	v
i	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $i = 0;$/;"	v
io	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $io = new ServerStub();$/;"	v
server	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $server = new Server($io);$/;"	v
test	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^        $test = $this;$/;"	v
testRequestEvent	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^    public function testRequestEvent()$/;"	f
testRequestEventIsEmitted	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^    public function testRequestEventIsEmitted()$/;"	f
testResponseContainsPoweredByHeader	vendor/react/react/tests/React/Tests/Http/ServerTest.php	/^    public function testResponseContainsPoweredByHeader()$/;"	f
RequestTest	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^class RequestTest extends TestCase$/;"	c
connector	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $this->connector = $this->getMock('React\\SocketClient\\ConnectorInterface');$/;"	v
connector	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    private $connector;$/;"	v
endCallback	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^                $endCallback = $cb;$/;"	v
endShouldOnlyAcceptScalars	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function endShouldOnlyAcceptScalars()$/;"	f
errorCallback	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^                $errorCallback = $cb;$/;"	v
factory	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $factory = $this->createCallableMock();$/;"	v
handler	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $handler = $this->createCallableMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $this->loop = $this->getMock('React\\EventLoop\\LoopInterface');$/;"	v
loop	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    private $loop;$/;"	v
pipeShouldPipeDataIntoTheRequestBody	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function pipeShouldPipeDataIntoTheRequestBody()$/;"	f
postRequestShouldSendAPostRequest	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function postRequestShouldSendAPostRequest()$/;"	f
rejectedConnectionMock	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    private function rejectedConnectionMock()$/;"	f
request	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $request = new Request($this->loop, $this->connector, $requestData);$/;"	v
requestData	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $requestData = new RequestData('GET', 'http:\/\/www.example.com');$/;"	v
requestData	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $requestData = new RequestData('POST', 'http:\/\/www.example.com');$/;"	v
requestShouldBindToStreamEventsAndUseconnector	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function requestShouldBindToStreamEventsAndUseconnector()$/;"	f
requestShouldEmitErrorIfConnectionEmitsError	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function requestShouldEmitErrorIfConnectionEmitsError()$/;"	f
requestShouldEmitErrorIfConnectionEndsBeforeResponseIsParsed	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function requestShouldEmitErrorIfConnectionEndsBeforeResponseIsParsed()$/;"	f
requestShouldEmitErrorIfConnectionFails	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function requestShouldEmitErrorIfConnectionFails()$/;"	f
requestShouldRelayErrorEventsFromResponse	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function requestShouldRelayErrorEventsFromResponse()$/;"	f
response	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $response = $this->response;$/;"	v
response	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $this->response = $this->getMockBuilder('React\\HttpClient\\Response')$/;"	v
setUp	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function setUp()$/;"	f
stream	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $stream = fopen('php:\/\/memory', 'r+');$/;"	v
stream	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $stream = new Stream($stream, $this->loop);$/;"	v
stream	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^        $this->stream = $this->getMockBuilder('React\\Stream\\Stream')$/;"	v
stream	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    private $stream;$/;"	v
successfulConnectionMock	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    private function successfulConnectionMock()$/;"	f
writeWithAPostRequestShouldSendToTheStream	vendor/react/react/tests/React/Tests/HttpClient/RequestTest.php	/^    public function writeWithAPostRequestShouldSendToTheStream()$/;"	f
ResponseTest	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^class ResponseTest extends TestCase$/;"	c
closedResponseShouldNotBeResumedOrPaused	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^    public function closedResponseShouldNotBeResumedOrPaused()$/;"	f
handler	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^        $handler = $this->createCallableMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^        $this->loop = $this->getMock('React\\EventLoop\\LoopInterface');$/;"	v
loop	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^    private $loop;$/;"	v
response	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^        $response = new Response($this->loop, $this->stream, 'HTTP', '1.0', '200', 'OK', array('Content-Type' => 'text\/plain'));$/;"	v
response	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^        $response = new Response($this->loop, $this->stream, 'http', '1.0', '200', 'ok', array('content-type' => 'text\/plain'));$/;"	v
responseShouldEmitEndEventOnEnd	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^    public function responseShouldEmitEndEventOnEnd()$/;"	f
setUp	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^    public function setUp()$/;"	f
stream	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^        $this->stream = $this->getMockbuilder('React\\Stream\\Stream')$/;"	v
stream	vendor/react/react/tests/React/Tests/HttpClient/ResponseTest.php	/^    private $stream;$/;"	v
ConnectionTest	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^class ConnectionTest extends TestCase$/;"	c
class	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $class  = new \\ReflectionClass('React\\\\Socket\\\\Connection');$/;"	v
class	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $class  = new \\ReflectionClass('React\\\\Socket\\\\Server');$/;"	v
client	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $client = stream_socket_client('tcp:\/\/localhost:' . $server->getPort());$/;"	v
conn	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $conn = new Connection($socket, $loop);$/;"	v
createLoopMock	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^    private function createLoopMock()$/;"	f
loop	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $loop   = $this->createLoopMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $loop   = new StreamSelectLoop();$/;"	v
master	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $master = $class->getProperty('master');$/;"	v
method	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $method = $class->getMethod('parseAddress');$/;"	v
mock	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $mock = $this->createCallableMock();$/;"	v
remoteAddressProvider	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^    public function remoteAddressProvider()$/;"	f
result	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $result = $method->invokeArgs($conn, array($given));$/;"	v
servConn	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $servConn = new Connection($server->master, $loop);$/;"	v
server	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $server = new Server($loop);$/;"	v
socket	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^        $socket = fopen('php:\/\/temp', 'r');$/;"	v
testGetRemoteAddress	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^    public function testGetRemoteAddress()$/;"	f
testParseAddress	vendor/react/react/tests/React/Tests/Socket/ConnectionTest.php	/^    public function testParseAddress($expected, $given)$/;"	f
ServerTest	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^class ServerTest extends TestCase$/;"	c
client	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $client = stream_socket_client('tcp:\/\/localhost:' . $this->port);$/;"	v
client	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $client = stream_socket_client('tcp:\/\/localhost:'.$this->port);$/;"	v
client1	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $client1 = stream_socket_client('tcp:\/\/localhost:'.$this->port);$/;"	v
client2	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $client2 = stream_socket_client('tcp:\/\/localhost:'.$this->port);$/;"	v
client3	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $client3 = stream_socket_client('tcp:\/\/localhost:'.$this->port);$/;"	v
createLoop	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    private function createLoop()$/;"	f
loop	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $this->loop = $this->createLoop();$/;"	v
loop	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    private $loop;$/;"	v
mock	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $mock = $this->createCallableMock();$/;"	v
mock	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $mock = $this->expectCallableNever();$/;"	v
mock	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $mock = $this->expectCallableOnce();$/;"	v
port	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $this->port = $this->server->getPort();$/;"	v
port	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    private $port;$/;"	v
server	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^        $this->server = new Server($this->loop);$/;"	v
server	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    private $server;$/;"	v
setUp	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function setUp()$/;"	f
tearDown	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function tearDown()$/;"	f
testConnection	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testConnection()$/;"	f
testConnectionWithManyClients	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testConnectionWithManyClients()$/;"	f
testData	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testData()$/;"	f
testDataWithNoData	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testDataWithNoData()$/;"	f
testDisconnect	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testDisconnect()$/;"	f
testDisconnectWithoutDisconnect	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testDisconnectWithoutDisconnect()$/;"	f
testFragmentedMessage	vendor/react/react/tests/React/Tests/Socket/ServerTest.php	/^    public function testFragmentedMessage()$/;"	f
CallableStub	vendor/react/react/tests/React/Tests/Socket/Stub/CallableStub.php	/^class CallableStub$/;"	c
__invoke	vendor/react/react/tests/React/Tests/Socket/Stub/CallableStub.php	/^    public function __invoke()$/;"	f
ConnectionStub	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^class ConnectionStub extends EventEmitter implements ConnectionInterface$/;"	c
close	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function close()$/;"	f
data	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    private $data = '';$/;"	v
end	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function end($data = null)$/;"	f
getData	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function getData()$/;"	f
getRemoteAddress	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function getRemoteAddress()$/;"	f
isReadable	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function isReadable()$/;"	f
isWritable	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function isWritable()$/;"	f
pause	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function pause()$/;"	f
pipe	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
resume	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function resume()$/;"	f
write	vendor/react/react/tests/React/Tests/Socket/Stub/ConnectionStub.php	/^    public function write($data)$/;"	f
ServerStub	vendor/react/react/tests/React/Tests/Socket/Stub/ServerStub.php	/^class ServerStub extends EventEmitter implements ServerInterface$/;"	c
getPort	vendor/react/react/tests/React/Tests/Socket/Stub/ServerStub.php	/^    public function getPort()$/;"	f
listen	vendor/react/react/tests/React/Tests/Socket/Stub/ServerStub.php	/^    public function listen($port, $host = '127.0.0.1')$/;"	f
shutdown	vendor/react/react/tests/React/Tests/Socket/Stub/ServerStub.php	/^    public function shutdown()$/;"	f
TestCase	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^class TestCase extends \\PHPUnit_Framework_TestCase$/;"	c
createCallableMock	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^    protected function createCallableMock()$/;"	f
expectCallableExactly	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^    protected function expectCallableExactly($amount)$/;"	f
expectCallableNever	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^    protected function expectCallableNever()$/;"	f
expectCallableOnce	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^    protected function expectCallableOnce()$/;"	f
mock	vendor/react/react/tests/React/Tests/Socket/TestCase.php	/^        $mock = $this->createCallableMock();$/;"	v
ConnectorTest	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^class ConnectorTest extends TestCase$/;"	c
capturedStream	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^                    $capturedStream = $stream;$/;"	v
capturedStream	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^                $capturedStream = $stream;$/;"	v
capturedStream	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^        $capturedStream = null;$/;"	v
connectionToEmptyIp6PortShouldFail	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^    public function connectionToEmptyIp6PortShouldFail()$/;"	f
connectionToEmptyPortShouldFail	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^    public function connectionToEmptyPortShouldFail()$/;"	f
connectionToIp6TcpServerShouldSucceed	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^    public function connectionToIp6TcpServerShouldSucceed()$/;"	f
connectionToTcpServerShouldSucceed	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^    public function connectionToTcpServerShouldSucceed()$/;"	f
connector	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^        $connector = new Connector($loop, $dns);$/;"	v
createResolverMock	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^    private function createResolverMock()$/;"	f
dns	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^        $dns = $this->createResolverMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^        $loop = new StreamSelectLoop();$/;"	v
server	vendor/react/react/tests/React/Tests/SocketClient/ConnectorTest.php	/^        $server = new Server($loop);$/;"	v
BufferTest	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^class BufferTest extends TestCase$/;"	c
buffer	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $buffer = new Buffer($a, $loop);$/;"	v
buffer	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $buffer = new Buffer($stream, $loop);$/;"	v
createLoopMock	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    private function createLoopMock()$/;"	f
createWriteableLoopMock	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    private function createWriteableLoopMock()$/;"	f
error	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^            $error = $message;$/;"	v
error	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $error = null;$/;"	v
loop	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $loop = $this->createLoopMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $loop = $this->createWriteableLoopMock();$/;"	v
stream	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $stream = fopen('php:\/\/temp', 'r+');$/;"	v
stream	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^        $stream = null;$/;"	v
testClose	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testClose()$/;"	f
testConstructor	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testConstructor()$/;"	f
testDrain	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testDrain()$/;"	f
testEnd	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testEnd()$/;"	f
testEndWithData	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testEndWithData()$/;"	f
testError	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testError()$/;"	f
testWrite	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testWrite()$/;"	f
testWriteDetectsWhenOtherSideIsClosed	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testWriteDetectsWhenOtherSideIsClosed()$/;"	f
testWriteReturnsFalseWhenBufferIsFull	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testWriteReturnsFalseWhenBufferIsFull()$/;"	f
testWritingToClosedBufferShouldNotWriteToStream	vendor/react/react/tests/React/Tests/Stream/BufferTest.php	/^    public function testWritingToClosedBufferShouldNotWriteToStream()$/;"	f
BufferedSinkTest	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^class BufferedSinkTest extends TestCase$/;"	c
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->createCallableMock();$/;"	v
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->expectCallableOnce();$/;"	v
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->expectCallableOnceWith('');$/;"	v
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->expectCallableOnceWith('foo');$/;"	v
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->expectCallableOnceWith('foobar');$/;"	v
callback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $callback = $this->expectCallableOnceWith('foobarbaz');$/;"	v
closeTwiceShouldBeFine	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function closeTwiceShouldBeFine()$/;"	f
closeWithEmptyBufferShouldResolveToEmptyString	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function closeWithEmptyBufferShouldResolveToEmptyString()$/;"	f
contents	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $contents = $sink->promise();$/;"	v
dataWrittenOnEndShouldBeBuffered	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function dataWrittenOnEndShouldBeBuffered()$/;"	f
endShouldResolvePromiseWithBufferContents	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function endShouldResolvePromiseWithBufferContents()$/;"	f
errback	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $errback = $this->expectCallableOnceWith($this->callback(function ($e) {$/;"	v
errorsShouldRejectPromise	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function errorsShouldRejectPromise()$/;"	f
expectCallableOnceWith	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    private function expectCallableOnceWith($value)$/;"	f
factoryMethodShouldImplicitlyPipeAndPromise	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function factoryMethodShouldImplicitlyPipeAndPromise()$/;"	f
forwardedErrorsFromPipeShouldRejectPromise	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function forwardedErrorsFromPipeShouldRejectPromise()$/;"	f
pipeShouldSucceedAndResolve	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function pipeShouldSucceedAndResolve()$/;"	f
promiseShouldReturnPromise	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function promiseShouldReturnPromise()$/;"	f
readable	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $readable = new ReadableStream();$/;"	v
resovedValueShouldContainMultipleWrites	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function resovedValueShouldContainMultipleWrites()$/;"	f
sink	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^        $sink = new BufferedSink();$/;"	v
writeShouldTriggerProgressOnPromise	vendor/react/react/tests/React/Tests/Stream/BufferedSinkTest.php	/^    public function writeShouldTriggerProgressOnPromise()$/;"	f
CompositeStreamTest	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^class CompositeStreamTest extends TestCase$/;"	c
closeShouldCloseBothStreams	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function closeShouldCloseBothStreams()$/;"	f
composite	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $composite = new CompositeStream($readable, $writable);$/;"	v
endShouldDelegateToWritableWithData	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function endShouldDelegateToWritableWithData()$/;"	f
input	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $input = $this->getMock('React\\Stream\\ReadableStream', array('pause', 'resume'));$/;"	v
input	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $input = new ReadableStream();$/;"	v
itShouldForwardPauseAndResumeUpstreamWhenPipedTo	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldForwardPauseAndResumeUpstreamWhenPipedTo()$/;"	f
itShouldForwardPipeCallsToReadableStream	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldForwardPipeCallsToReadableStream()$/;"	f
itShouldForwardReadableCallsToReadableStream	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldForwardReadableCallsToReadableStream()$/;"	f
itShouldForwardWritableCallsToWritableStream	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldForwardWritableCallsToWritableStream()$/;"	f
itShouldHandlePipingCorrectly	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldHandlePipingCorrectly()$/;"	f
itShouldReceiveForwardedEvents	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^    public function itShouldReceiveForwardedEvents()$/;"	f
output	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $output = $this->getMock('React\\Stream\\WritableStreamInterface');$/;"	v
readable	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $readable = $this->getMock('React\\Stream\\ReadableStreamInterface');$/;"	v
readable	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $readable = new ReadableStream();$/;"	v
writable	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $writable = $this->getMock('React\\Stream\\WritableStream', array('write'));$/;"	v
writable	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $writable = $this->getMock('React\\Stream\\WritableStreamInterface');$/;"	v
writable	vendor/react/react/tests/React/Tests/Stream/CompositeStreamTest.php	/^        $writable = new WritableStream();$/;"	v
ReadableStreamTest	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^class ReadableStreamTest extends TestCase$/;"	c
closeShouldClose	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^    public function closeShouldClose()$/;"	f
doubleCloseShouldWork	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^    public function doubleCloseShouldWork()$/;"	f
itShouldBeReadableByDefault	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^    public function itShouldBeReadableByDefault()$/;"	f
pauseShouldDoNothing	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^    public function pauseShouldDoNothing()$/;"	f
readable	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^        $readable = new ReadableStream();$/;"	v
resumeShouldDoNothing	vendor/react/react/tests/React/Tests/Stream/ReadableStreamTest.php	/^    public function resumeShouldDoNothing()$/;"	f
StreamTest	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^class StreamTest extends TestCase$/;"	c
buffer	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $buffer = $conn->getBuffer();$/;"	v
capturedData	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^            $capturedData = $data;$/;"	v
capturedData	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $capturedData = null;$/;"	v
conn	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $conn = new Stream($stream, $loop);$/;"	v
createLoopMock	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    private function createLoopMock()$/;"	f
createWriteableLoopMock	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    private function createWriteableLoopMock()$/;"	f
loop	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $loop = $this->createLoopMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $loop = $this->createWriteableLoopMock();$/;"	v
stream	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $stream = "Silly developer, you can't write to to a string!";$/;"	v
stream	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^        $stream = fopen('php:\/\/temp', 'r+');$/;"	v
testBufferEventsShouldBubbleUp	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testBufferEventsShouldBubbleUp()$/;"	f
testClosingStreamInDataEventShouldNotTriggerError	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testClosingStreamInDataEventShouldNotTriggerError()$/;"	f
testConstructor	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testConstructor()$/;"	f
testDataEvent	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testDataEvent()$/;"	f
testEnd	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testEnd()$/;"	f
testWrite	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testWrite()$/;"	f
testWriteError	vendor/react/react/tests/React/Tests/Stream/StreamTest.php	/^    public function testWriteError()$/;"	f
ReadableStreamStub	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^class ReadableStreamStub extends EventEmitter implements ReadableStreamInterface$/;"	c
close	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function close()$/;"	f
end	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function end()$/;"	f
error	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function error($error)$/;"	f
isReadable	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function isReadable()$/;"	f
pause	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function pause()$/;"	f
paused	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^        $this->paused = false;$/;"	v
paused	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^        $this->paused = true;$/;"	v
paused	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public $paused = false;$/;"	v
pipe	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
readable	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^        $this->readable = false;$/;"	v
readable	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public $readable = true;$/;"	v
resume	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function resume()$/;"	f
write	vendor/react/react/tests/React/Tests/Stream/Stub/ReadableStreamStub.php	/^    public function write($data)$/;"	f
ThroughStreamTest	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^class ThroughStreamTest extends TestCase$/;"	c
closeShouldClose	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function closeShouldClose()$/;"	f
doubleCloseShouldWork	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function doubleCloseShouldWork()$/;"	f
endShouldCloseTheStream	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function endShouldCloseTheStream()$/;"	f
endShouldWriteDataBeforeClosing	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function endShouldWriteDataBeforeClosing()$/;"	f
expectCallableOnceWith	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    protected function expectCallableOnceWith($arg)$/;"	f
input	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $input = $this->getMock('React\\Stream\\ReadableStream', array('pause'));$/;"	v
input	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $input = $this->getMock('React\\Stream\\ReadableStream', array('resume'));$/;"	v
itShouldBeReadableByDefault	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function itShouldBeReadableByDefault()$/;"	f
itShouldBeWritableByDefault	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function itShouldBeWritableByDefault()$/;"	f
itShouldEmitAnyDataWrittenToIt	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function itShouldEmitAnyDataWrittenToIt()$/;"	f
mock	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $mock = $this->createCallableMock();$/;"	v
output	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $output = $this->getMock('React\\Stream\\WritableStreamInterface');$/;"	v
pauseShouldDelegateToPipeSource	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function pauseShouldDelegateToPipeSource()$/;"	f
pipeShouldPipeCorrectly	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function pipeShouldPipeCorrectly()$/;"	f
pipingStuffIntoItShouldWork	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function pipingStuffIntoItShouldWork()$/;"	f
readable	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $readable = new ReadableStream();$/;"	v
resumeShouldDelegateToPipeSource	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^    public function resumeShouldDelegateToPipeSource()$/;"	f
through	vendor/react/react/tests/React/Tests/Stream/ThroughStreamTest.php	/^        $through = new ThroughStream();$/;"	v
UtilTest	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^class UtilTest extends TestCase$/;"	c
buffer	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $buffer = new Buffer($stream, $loop);$/;"	v
createLoopMock	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    private function createLoopMock()$/;"	f
createWriteableLoopMock	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    private function createWriteableLoopMock()$/;"	f
forwardEventsShouldSetupForwards	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function forwardEventsShouldSetupForwards()$/;"	f
loop	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $loop = $this->createLoopMock();$/;"	v
loop	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $loop = $this->createWriteableLoopMock();$/;"	v
notEqualTo	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    private function notEqualTo($value)$/;"	f
onDrain	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^                $onDrain = $callback;$/;"	v
onDrain	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $onDrain = null;$/;"	v
readable	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $readable = $this->getMock('React\\Stream\\ReadableStreamInterface');$/;"	v
readable	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $readable = new Stub\\ReadableStreamStub();$/;"	v
source	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $source = new ReadableStream();$/;"	v
stream	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $stream = fopen('php:\/\/temp', 'r+');$/;"	v
target	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $target = new ReadableStream();$/;"	v
testPipeShouldEmitEvents	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeShouldEmitEvents()$/;"	f
testPipeWithBuffer	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeWithBuffer()$/;"	f
testPipeWithEnd	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeWithEnd()$/;"	f
testPipeWithTooSlowWritableShouldPauseReadable	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeWithTooSlowWritableShouldPauseReadable()$/;"	f
testPipeWithTooSlowWritableShouldResumeOnDrain	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeWithTooSlowWritableShouldResumeOnDrain()$/;"	f
testPipeWithoutEnd	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^    public function testPipeWithoutEnd()$/;"	f
writable	vendor/react/react/tests/React/Tests/Stream/UtilTest.php	/^        $writable = $this->getMock('React\\Stream\\WritableStreamInterface');$/;"	v
WritableStreamTest	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^class WritableStreamTest extends TestCase$/;"	c
closeShouldClose	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function closeShouldClose()$/;"	f
doubleCloseShouldWork	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function doubleCloseShouldWork()$/;"	f
endShouldCloseTheStream	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function endShouldCloseTheStream()$/;"	f
endShouldWriteDataBeforeClosing	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function endShouldWriteDataBeforeClosing()$/;"	f
itShouldBeWritableByDefault	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function itShouldBeWritableByDefault()$/;"	f
pipingStuffIntoItShouldWorkButDoNothing	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^    public function pipingStuffIntoItShouldWorkButDoNothing()$/;"	f
readable	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^        $readable = new ReadableStream();$/;"	v
through	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^        $through = $this->getMock('React\\Stream\\WritableStream', array('write'));$/;"	v
through	vendor/react/react/tests/React/Tests/Stream/WritableStreamTest.php	/^        $through = new WritableStream();$/;"	v
loader	vendor/react/react/tests/bootstrap.php	/^$loader = require __DIR__.'\/..\/vendor\/autoload.php';$/;"	v
